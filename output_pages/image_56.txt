42
CHAPTER  06    코드 혼잡화
avoid { } 
문법적으로 어쩔 수 없는 경우가 아니라면 절대로 if/else 블록을 감싸는 괄호 { 
}를 
사용하지 말자. 들여쓰기 없이 if/else와 블록을 여러 단계로 중첩한다면 전문 유
지보수 프로그래머라도 가볍게 해치울 수 있다. 펄Perl을 사용하면 이 기법의 효과
가 극대화된다. 일반 코드 뒤에 if문을 양념으로 추가하는 것도 좋은 방법이다. 
지옥에서 온 탭 
탭을 과소평가하지 마라. 탭이 얼마의 공간을 나타내야 하는지에 대한 표준이 없는 
회사에서는 공백 대신에 탭을 사용하므로 큰 혼란을 야기할 수 있다. 스트링 문자
에 탭을 추가하거나 공백을 탭으로 변환해주는 툴을 돌리는 것도 좋은 방법이다. 
마법 같은 행렬 위치 
특정 행렬 값을 플래그로 사용해보자. 변환 행렬에서 동종 좌표 시스템을 이용한 
[3][0]에 위치한 요소 등은 좋은 예이다. 
마법 같은 행렬 슬롯의 개선 
주어진 형식의 여러 변수가 필요할 때에는 변수를 배열로 정의하고 숫자로 각 변수
를 접근할 수 있다. 이 때 숫자 규칙은 자신만이 아는 것으로 정하고 문서화하지 않
는다. 또한 고생스럽게 #define 상수로 인덱스를 정의할 필요도 없다. 전역 변수 
widget[15]는 취소 버튼이라는 사실은 누구나 당연히 알고 있어야 한다. 이는 어
셈블러 코드에서 절대적 숫자 주소를 접근할 때 최근 이용하는 방식이다. 
아름다움을 멀리하라 
절대 자동 코드 정렬 기능으로 코드를 정렬하지 말자. PVCS/CVS(버전 관리를 이
력을 추적하는)에서 가짜 정보를 만드는 이와 같은 도구를 사용하지 않도록 회사 
현장에서 로비를 하자. 또는 모든 프로그래머는 자신이 만드는 모듈에 영원히 신성
불가침한 자신만의 들여쓰기 방식을 가져야 한다고 주장하자. 다른 프로그래머에
게는 이러한 방식을 따르더라도 각자가 만든 모듈에서만 이와 같은 특유의 규칙이 
This eBook is licensed to 남궁진(jinvicky@naver.com). Personal use only
