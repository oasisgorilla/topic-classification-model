384
Chapter 3
Machine-Level Representation of Programs
. The value at dp is retrieved, converted to an int (line 4), and then stored at
ip. We can therefore infer that val1 is d.
. The value at ip is retrieved, converted to a float (line 6), and then stored at
fp. We can therefore infer that val2 is i.
. The value of l is converted to a double (line 8) and stored at dp. We can
therefore infer that val3 is l.
. The value at fp is retrieved on line 3. The two instructions at lines 10–11
convert this to double precision as the value returned in register %xmm0. We
can therefore infer that val4 is f.
Solution to Problem 3.51 (page 336)
These cases can be handled by selecting the appropriate entries from the tables in
Figures 3.47 and 3.48, or using one of the code sequences for converting between
ﬂoating-point formats.
Tx
Ty
Instruction(s)
long
double
vcvtsi2sdq %rdi, %xmm0, %xmm0
double
int
vcvttsd2si %xmm0, %eax
float
double
vunpcklpd %xmm0, %xmm0, %xmm0
vcvtpd2ps %xmm0, %xmm0
long
float
vcvtsi2ssq %rdi, %xmm0, %xmm0
float
long
vcvttss2siq %xmm0, %rax
Solution to Problem 3.52 (page 337)
The basic rules for mapping arguments to registers are fairly simple (although they
become much more complex with more and other types of arguments [77]).
A. double g1(double a, long b, float c, int d);
Registers: a in %xmm0, b in %rdi c in %xmm1, d in %esi
B. double g2(int a, double *b, float *c, long d);
Registers: a in %edi, b in %rsi, c in %rdx, d in %rcx
C. double g3(double *a, double b, int c, float d);
Registers: a in %rdi, b in %xmm0, c in %esi, d in %xmm1
D. double g4(float a, int *b, float c, double d);
Registers: a in %xmm0, b in %rdi, c in %xmm1, d in %xmm2
Solution to Problem 3.53 (page 339)
We can see from the assembly code that there are two integer arguments, passed
in registers %rdi and %rsi. Let us name these i1 and i2. Similarly, there are two
ﬂoating-point arguments, passed in registers %xmm0 and %xmm1, which we name f1
and f2.
We can then annotate the assembly code:
