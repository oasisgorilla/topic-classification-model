284
Chapter 3
Machine-Level Representation of Programs
5
movl
$6, %eax
6
ret
Determine a valid ordering and types of the four parameters. There are two
correct answers.
3.7.4
Local Storage on the Stack
Most of the procedure examples we have seen so far did not require any local
storage beyond what could be held in registers. At times, however, local data must
be stored in memory. Common cases of this include these:
. There are not enough registers to hold all of the local data.
. The address operator ‘&’ is applied to a local variable, and hence we must be
able to generate an address for it.
. Some of the local variables are arrays or structures and hence must be accessed
by array or structure references. We will discuss this possibility when we
describe how arrays and structures are allocated.
Typically, a procedure allocates space on the stack frame by decrementing the
stack pointer. This results in the portion of the stack frame labeled “Local vari-
ables” in Figure 3.25.
As an example of the handling of the address operator, consider the two
functions shown in Figure 3.31(a). The function swap_add swaps the two values
designated by pointers xp and yp and also returns the sum of the two values. The
function caller creates pointers to local variables arg1 and arg2 and passes these
to swap_add. Figure 3.31(b) shows how caller uses a stack frame to implement
these local variables. The code for caller starts by decrementing the stack pointer
by 16; this effectively allocates 16 bytes on the stack. Letting S denote the value of
the stack pointer, we can see that the code computes &arg2 as S + 8 (line 5), &arg1
as S (line 6). We can therefore infer that local variables arg1 and arg2 are stored
within the stack frame at offsets 0 and 8 relative to the stack pointer. When the call
to swap_add completes, the code for caller then retrieves the two values from
the stack (lines 8–9), computes their difference, and multiplies this by the value
returned by swap_add in register %rax (line 10). Finally, the function deallocates
its stack frame by incrementing the stack pointer by 16 (line 11.) We can see with
this example that the run-time stack provides a simple mechanism for allocating
local storage when it is required and deallocating it when the function completes.
As a more complex example, the function call_proc, shown in Figure 3.32,
illustrates many aspects of the x86-64 stack discipline. Despite the length of this
example, it is worth studying carefully. It shows a function that must allocate
storage on the stack for local variables, as well as to pass values to the 8-argument
function proc (Figure 3.29). The function creates a stack frame, diagrammed in
Figure 3.33.
Looking at the assembly code for call_proc (Figure 3.32(b)), we can see
that a large portion of the code (lines 2–15) involves preparing to call function
