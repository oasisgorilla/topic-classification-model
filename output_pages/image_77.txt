63
CHAPTER  11    잡다한 기법
스코드 관리 시스템 없이도 코드 가지치기를 할 수 있으며 후임자가 어떤 버전의 
DoUsefulWork( 
)을 수정해야 하는지 절대 찾을 수 없게 만들 수 있다. 
코딩 표준을 수집하라 
정사각 박스 제안Square Box Suggestions과 같은 유지보수할 수 있는 코드를 작성하는 
방법에 대한 팁을 모두 모아서 대놓고 그 팁을 위반하자. 
내가 아니라, IDE! 
모든 코드를 makefile로 만들어라. 후임자는 헤더파일을 생성하고 응용프로그램
을 빌드하는 배치파일을 생성하는 makefile을 만들었다는 사실에 감탄할 것이다. 
그리고 이를 변경했을 때 어떤 일이 일어날 것인지 알기 어렵고 최신 IDE로 프로젝
트를 옮기기도 어렵게 만들 수 있다. 그리고 이미 뇌사 상태에 들어간 NMAKE 버
전을 종속성 개념 없이 사용하므로 효과를 극대화할 수 있다. 
회사 코딩 표준을 무시하라 
몇몇 회사에서는 프로그램에 숫자 기호 사용을 금지하는 등과 같은 강력한 정책을 
적용한다. 이 경우에는 어쩔 수 없이 상수에 이름을 붙여 사용해야 한다. 물론 정책
을 와해시키는 것은 간단하다. 예를 들어, 똘똘한 C++ 프로그래머는 다음과 같이 
상수를 정의했다. 
#define K_ONE 1 
#define K_TWO 2 
#define K_THOUSAND 999
컴파일러 경고
컴파일러 경고를 모두 수정하지 말고 남겨두는 것이 좋다. Make 파일에 접두어 
“-”를 사용하므로 컴파일 에러로 make가 실패하는 걸 방지할 수 있다. 실수로 유
지보수 프로그래머가 소스코드에 에러를 저질렀더라도 make는 전체 패키지를 다
시 빌드하려 할 것이다. 심지어 운이 좋으면 빌드에 성공한다! 우리 코드를 손수 
