Contents
15
9.3
VM as a Tool for Caching
841
9.3.1
DRAM Cache Organization
842
9.3.2
Page Tables
842
9.3.3
Page Hits
844
9.3.4
Page Faults
844
9.3.5
Allocating Pages
846
9.3.6
Locality to the Rescue Again
846
9.4
VM as a Tool for Memory Management
847
9.5
VM as a Tool for Memory Protection
848
9.6
Address Translation
849
9.6.1
Integrating Caches and VM
853
9.6.2
Speeding Up Address Translation with a TLB
853
9.6.3
Multi-Level Page Tables
855
9.6.4
Putting It Together: End-to-End Address Translation
857
9.7
Case Study: The Intel Core i7/Linux Memory System
861
9.7.1
Core i7 Address Translation
862
9.7.2
Linux Virtual Memory System
864
9.8
Memory Mapping
869
9.8.1
Shared Objects Revisited
869
9.8.2
The fork Function Revisited
872
9.8.3
The execve Function Revisited
872
9.8.4
User-Level Memory Mapping with the mmap Function
873
9.9
Dynamic Memory Allocation
875
9.9.1
The malloc and free Functions
876
9.9.2
Why Dynamic Memory Allocation?
879
9.9.3
Allocator Requirements and Goals
880
9.9.4
Fragmentation
882
9.9.5
Implementation Issues
882
9.9.6
Implicit Free Lists
883
9.9.7
Placing Allocated Blocks
885
9.9.8
Splitting Free Blocks
885
9.9.9
Getting Additional Heap Memory
886
9.9.10 Coalescing Free Blocks
886
9.9.11 Coalescing with Boundary Tags
887
9.9.12 Putting It Together: Implementing a Simple Allocator
890
9.9.13 Explicit Free Lists
898
9.9.14 Segregated Free Lists
899
9.10
Garbage Collection
901
9.10.1 Garbage Collector Basics
902
9.10.2 Mark&Sweep Garbage Collectors
903
9.10.3 Conservative Mark&Sweep for C Programs
905
