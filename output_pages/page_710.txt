Section 7.3
Object Files
709
To build the executable, the linker must perform two main tasks:
Step1.Symbolresolution. Object ﬁlesdeﬁneandreference symbols, whereeach
symbol corresponds to a function, a global variable, or a static variable
(i.e., any C variable declared with the static attribute). The purpose of
symbol resolution is to associate each symbol reference with exactly one
symbol deﬁnition.
Step 2. Relocation. Compilers and assemblers generate code and data sections
that start at address 0. The linker relocates these sections by associating a
memory location with each symbol deﬁnition, and then modifying all of
the references to those symbols so that they point to this memory location.
The linker blindly performs these relocations using detailed instructions,
generated by the assembler, called relocation entries.
The sections that follow describe these tasks in more detail. As you read, keep
in mind some basic facts about linkers: Object ﬁles are merely collections of blocks
of bytes. Some of these blocks contain program code, others contain program
data, and others contain data structures that guide the linker and loader. A linker
concatenates blocks together, decides on run-time locations for the concatenated
blocks, and modiﬁes various locations within the code and data blocks. Linkers
have minimal understanding of the target machine. The compilers and assemblers
that generate the object ﬁles have already done most of the work.
7.3
Object Files
Object ﬁles come in three forms:
Relocatable object ﬁle. Contains binary code and data in a form that can be
combined with other relocatable object ﬁles at compile time to create an
executable object ﬁle.
Executable object ﬁle. Contains binary code and data in a form that can be
copied directly into memory and executed.
Shared object ﬁle. A special type of relocatable object ﬁle that can be loaded
into memory and linked dynamically, at either load time or run time.
Compilers and assemblers generate relocatable object ﬁles (including shared
objectﬁles).Linkersgenerateexecutableobjectﬁles.Technically, an objectmodule
is a sequence of bytes, and an object ﬁle is an object module stored on disk in a
ﬁle. However, we will use these terms interchangeably.
Object ﬁles are organized according to speciﬁc object ﬁle formats, which vary
from system to system. The ﬁrst Unix systems from Bell Labs used the a.out
format. (To this day, executables are still referred to as a.out ﬁles.) Windows
uses the Portable Executable (PE) format. Mac OS-X uses the Mach-O format.
Modern x86-64 Linux and Unix systems use Executable and Linkable Format
(ELF). Although our discussion will focus on ELF, the basic concepts are similar,
regardless of the particular format.
