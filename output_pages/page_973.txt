972
Chapter 11
Network Programming
Client
Connection
request
clientfd
Client
clientfd
listenfd(3)
connfd(4)
listenfd(3)
listenfd(3)
Client
Server
Server
Server
clientfd
1. Server blocks in accept,
waiting for connection request on
listening descriptor listenfd.
2. Client makes connection request by
calling and blocking in connect.
3. Server returns connfd from accept.
Client returns from connect. Connection
is now established between clientfd
and connfd.
Figure 11.14
The roles of the listening and connected descriptors.
11.4.6
The accept Function
Servers wait for connection requests from clients by calling the accept function.
#include <sys/socket.h>
int accept(int listenfd, struct sockaddr *addr, int *addrlen);
Returns: nonnegative connected descriptor if OK, −1 on error
The accept function waits for a connection request from a client to arrive on
the listening descriptor listenfd, then ﬁlls in the client’s socket address in addr,
and returns a connected descriptor that can be used to communicate with the client
using Unix I/O functions.
The distinction between a listening descriptor and a connected descriptor
confuses many students. The listening descriptor serves as an end point for client
connection requests. It is typically created once and exists for the lifetime of
the server. The connected descriptor is the end point of the connection that is
established between the client and the server. It is created each time the server
accepts a connection request and exists only as long as it takes the server to service
a client.
Figure 11.14 outlines the roles of the listening and connected descriptors. In
step 1, the server calls accept, which waits for a connection request to arrive on
the listening descriptor, which for concreteness we will assume is descriptor 3.
Recall that descriptors 0–2 are reserved for the standard ﬁles.
In step 2, the client calls the connect function, which sends a connection
request to listenfd. In step 3, the accept function opens a new connected de-
scriptor connfd (which we will assume is descriptor 4), establishes the connection
between clientfd and connfd, and then returns connfd to the application. The
