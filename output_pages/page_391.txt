390
Chapter 4
Processor Architecture
instruction set, because it was inspired by the x86-64 instruction set. Compared
with x86-64, the Y86-64 instruction set has fewer data types, instructions, and
addressing modes. It also has a simple byte-level encoding, making the machine
code less compact than the comparable x86-64 code, but also much easier to design
the CPU’s decoding logic. Even though the Y86-64 instruction set is very simple,
it is sufﬁciently complete to allow us to write programs manipulating integer data.
Designing a processor to implement Y86-64 requires us to deal with many of the
challenges faced by processor designers.
We then provide some background on digital hardware design. We describe
the basic building blocks used in a processor and how they are connected together
and operated. This presentation builds on our discussion of Boolean algebra and
bit-level operations from Chapter 2. We also introduce a simple language, HCL
(for “hardware control language”), to describe the control portions of hardware
systems. We will later use this language to describe our processor designs. Even if
you already have some background in logic design, read this section to understand
our particular notation.
As a ﬁrst step in designing a processor, we present a functionally correct,
but somewhat impractical, Y86-64 processor based on sequential operation. This
processor executes a complete Y86-64 instruction on every clock cycle. The clock
must run slowly enough to allow an entire series of actions to complete within one
cycle. Such a processor could be implemented, but its performance would be well
below what could be achieved for this much hardware.
With the sequential design as a basis, we then apply a series of transforma-
tions to create a pipelined processor. This processor breaks the execution of each
instruction into ﬁve steps, each of which is handled by a separate section or stage of
the hardware. Instructions progress through the stages of the pipeline, with one in-
struction entering the pipeline on each clock cycle. As a result, the processor can
be executing the different steps of up to ﬁve instructions simultaneously. Mak-
ing this processor preserve the sequential behavior of the Y86-64 ISA requires
handling a variety of hazard conditions, where the location or operands of one
instruction depend on those of other instructions that are still in the pipeline.
We have devised a variety of tools for studying and experimenting with our
processor designs. These include an assembler for Y86-64, a simulator for running
Y86-64 programs on your machine, and simulators for two sequential and one
pipelined processor design. The control logic for these designs is described by
ﬁles in HCL notation. By editing these ﬁles and recompiling the simulator, you can
alter and extend the simulator’s behavior. A number of exercises are provided that
involve implementing new instructions and modifying how the machine processes
instructions. Testing code is provided to help you evaluate the correctness of your
modiﬁcations. These exercises will greatly aid your understanding of the material
and will give you an appreciation for the many different design alternatives faced
by processor designers.
Web Aside arch:vlog on page 503 presents a representation of our pipelined
Y86-64 processor in the Verilog hardware description language. This involves
creating modules for the basic hardware building blocks and for the overall pro-
cessor structure. We automatically translate the HCL description of the control
