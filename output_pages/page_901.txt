900
Chapter 9
Virtual Memory
Simple Segregated Storage
With simple segregated storage, the free list for each size class contains same-size
blocks, each the size of the largest element of the size class. For example, if some
size class is deﬁned as {17–32}, then the free list for that class consists entirely of
blocks of size 32.
To allocate a block of some given size, we check the appropriate free list. If the
list is not empty, we simply allocate the ﬁrst block in its entirety. Free blocks are
never split to satisfy allocation requests. If the list is empty, the allocator requests
a ﬁxed-size chunk of additional memory from the operating system (typically a
multiple of the page size), divides the chunk into equal-size blocks, and links the
blocks together to form the new free list. To free a block, the allocator simply
inserts the block at the front of the appropriate free list.
There are a number of advantages to this simple scheme. Allocating and
freeing blocks are both fast constant-time operations. Further, the combination
of the same-size blocks in each chunk, no splitting, and no coalescing means that
there is very little per-block memory overhead. Since each chunk has only same-
size blocks, the size of an allocated block can be inferred from its address. Since
there is no coalescing, allocated blocks do not need an allocated/free ﬂag in the
header. Thus, allocated blocks require no headers, and since there is no coalescing,
they do not require any footers either. Since allocate and free operations insert
and delete blocks at the beginning of the free list, the list need only be singly
linked instead of doubly linked. The bottom line is that the only required ﬁeld in
any block is a one-word succ pointer in each free block, and thus the minimum
block size is only one word.
A signiﬁcant disadvantage is that simple segregated storage is susceptible to
internal and external fragmentation. Internal fragmentation is possible because
free blocks are never split. Worse, certain reference patterns can cause extreme
external fragmentation because free blocks are never coalesced (Practice Prob-
lem 9.10).
Practice Problem 9.10 (solution page 921)
Describe a reference pattern that results in severe external fragmentation in an
allocator based on simple segregated storage.
Segregated Fits
With this approach, the allocator maintains an array of free lists. Each free list is
associated with a size class and is organized as some kind of explicit or implicit list.
Each list contains potentially different-size blocks whose sizes are members of the
size class. There are many variants of segregated ﬁts allocators. Here we describe
a simple version.
To allocate a block, we determine the size class of the request and do a ﬁrst-
ﬁt search of the appropriate free list for a block that ﬁts. If we ﬁnd one, then we
(optionally) split it and insert the fragment in the appropriate free list. If we cannot
ﬁnd a block that ﬁts, then we search the free list for the next larger size class. We
