Homework Problems
1001
Web servers and their clients (such as browsers) communicate with each other
using the HTTP protocol. A browser requests either static or dynamic content
from the server. A request for static content is served by fetching a ﬁle from the
server’s disk and returning it to the client. A request for dynamic content is served
by running a program in the context of a child process on the server and returning
its output to the client. The CGI standard provides a set of rules that govern how
the client passes program arguments to the server, how the server passes these
arguments and other information to the child process, and how the child sends
its output back to the client. A simple but functioning Web server that serves
both static and dynamic content can be implemented in a few hundred lines of
C code.
Bibliographic Notes
The ofﬁcial source of information for the Internet is contained in a set of freely
available numbered documents known as RFCs (requests for comments). A
searchable index of RFCs is available on the Web at
http://rfc-editor.org
RFCs are typically written for developers of Internet infrastructure, and thus
they are usually too detailed for the casual reader. However, for authoritative
information, there is no better source. The HTTP/1.1 protocol is documented in
RFC 2616. The authoritative list of MIME types is maintained at
http://www.iana.org/assignments/media-types
Kerrisk is the bible for all aspects of Linux programming and provides a de-
tailed discussion of modern network programming [62]. There are a number of
good general texts on computer networking [65, 84, 114]. The great technical
writer W. Richard Stevens developed a series of classic texts on such topics as ad-
vanced Unix programming [111], the Internet protocols [109, 120, 107], and Unix
network programming [108, 110]. Serious students of Unix systems programming
will want to study all of them. Tragically, Stevens died on September 1, 1999. His
contributions are greatly missed.
Homework Problems
11.6 ◆◆
A. Modify Tiny so that it echoes every request line and request header.
B. Use your favorite browser to make a request to Tiny for static content.
Capture the output from Tiny in a ﬁle.
C. Inspect the output from Tiny to determine the version of HTTP your
browser uses.
