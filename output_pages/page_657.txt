656
Chapter 6
The Memory Hierarchy
Address bits
Address
Tag bits
Index bits
Offset bits
Block number
(decimal)
(t = 1)
(s = 2)
(b = 1)
(decimal)
0
0
00
0
0
1
0
00
1
0
2
0
01
0
1
3
0
01
1
1
4
0
10
0
2
5
0
10
1
2
6
0
11
0
3
7
0
11
1
3
8
1
00
0
4
9
1
00
1
4
10
1
01
0
5
11
1
01
1
5
12
1
10
0
6
13
1
10
1
6
14
1
11
0
7
15
1
11
1
7
Figure 6.30
4-bit address space for example direct-mapped cache.
Let us simulate the cache in action as the CPU performs a sequence of reads.
Remember that for this example we are assuming that the CPU reads 1-byte
words. While this kind of manual simulation is tedious and you may be tempted
to skip it, in our experience students do not really understand how caches work
until they work their way through a few of them.
Initially, the cache is empty (i.e., each valid bit is 0):
Set
Valid
Tag
block[0]
block[1]
0
0
1
0
2
0
3
0
Each row in the table represents a cache line. The ﬁrst column indicates the set
that the line belongs to, but keep in mind that this is provided for convenience and
is not really part of the cache. The next four columns represent the actual bits in
each cache line. Now, let’s see what happens when the CPU performs a sequence
of reads:
1. Read word at address 0. Since the valid bit for set 0 is 0, this is a cache miss.
The cache fetches block 0 from memory (or a lower-level cache) and stores the
