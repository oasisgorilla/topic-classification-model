32
CHAPTER  05    프로그램 디자인
있게 해야 한다. 인터페이스를 구현하는 클래스명에 “Impl”을 붙이는 것은 학계에
서 떠도는 유행 중 하나다. Runnable을 구현하는 클래스 등에서 유용성이 커진다.
레이아웃을 피하라
절대 레이아웃을 이용하지 말라. 그러면 유지보수 프로그래머가 필드 하나를 추가
하려고 화면에 나타나는 모든 다른 콤포넌트의 좌표를 일일이 수정하게 만들 수 있
다. 상사가 레이아웃을 사용하도록 강요한다면, 거대한 단일 GridBagLayout을 
만들어서 절대 그리드 좌표로 하드 코딩하는 방법으로 우회하자.
환경 변수
다른 프로그래머가 사용할 클래스를 만들어야 한다면 환경 변수를 확인하는 코드
(C++에서는 getenv(), 자바에서는 System.getProperty())를 클래스의 정적 초
기화를 담당하는 메소드(이름 없는)에 추가하자. 이러한 방법으로 모든 매개변수
를 생성자를 거치지 않고 클래스에 전달할 수 있다. 초기화 담당 메소드를 사용하
면 프로그램 바이너리를 로드하는 순간 호출된다는 장점이 있다. 즉, 프로그램의 
main()이 호출되기도 전에 이와 같은 작업이 완료된다. 따라서 우리의 클래스를 
직접 확인하기 전까지는 프로그램의 다른 부분에서는 파라미터 값을 고칠 방법이 
없다. 오히려 사용자가 우리의 방식에 맞춰 자신의 환경 변수를 모두 설정하는 편
이 편할 것이다.
테이블 기반 로직
테이블 기반 로직은 피해야 한다. 테이블 기반 로직은 너무 훤히 들여다보여서 최
종 사용자는 바로 교정을 시작할 수 있고 곧 몸서리 칠 수 있다. 심지어는 직접 테
이블을 수정할 수도 있다.
엄마의 필드를 수정하라
모든 기본형 파라미터는 값으로 전달되므로 자바에서는 이들을 읽기-전용으로 전달
한다. 피호출자에서 파라미터 값을 수정할 수는 있지만, 호출자의 변수에는 영향을 
This eBook is licensed to 남궁진(jinvicky@naver.com). Personal use only
