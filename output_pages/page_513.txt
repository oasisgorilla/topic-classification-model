512
Chapter 4
Processor Architecture
instruction. Implement test code similar to what is shown in C to demonstrate that
your implementation of switchv will handle both the cases handled explicitly as
well as those that trigger the default case.
4.51 ◆
Practice Problem 4.3 introduced the iaddq instruction to add immediate data to a
register. Describe the computations performed to implement this instruction. Use
the computations for irmovq and OPq (Figure 4.18) as a guide.
4.52 ◆◆
The ﬁle seq-full.hcl contains the HCL description for SEQ, along with the
declaration of a constant IIADDQ having hexadecimal value C, the instruction code
for iaddq. Modify the HCL descriptions of the control logic blocks to implement
the iaddq instruction, as described in Practice Problem 4.3 and Problem 4.51. See
the lab material for directions on how to generate a simulator for your solution
and how to test it.
4.53 ◆◆◆
Suppose we wanted to create a lower-cost pipelined processor based on the struc-
ture we devised for PIPE−(Figure 4.41), without any bypassing. This design would
handle all data dependencies by stalling until the instruction generating a needed
value has passed through the write-back stage.
The ﬁle pipe-stall.hcl contains a modiﬁed version of the HCL code for
PIPE in which the bypassing logic has been disabled. That is, the signals e_valA
and e_valB are simply declared as follows:
##
DO NOT MODIFY THE FOLLOWING CODE.
## No forwarding.
valA is either valP or value from register file
word d_valA = [
D_icode in { ICALL, IJXX } : D_valP; # Use incremented PC
1 : d_rvalA;
# Use value read from register file
];
## No forwarding.
valB is value from register file
word d_valB = d_rvalB;
Modify the pipeline control logic at the end of this ﬁle so that it correctly han-
dles all possible control and data hazards. As part of your design effort, you should
analyze the different combinations of control cases, as we did in the design of the
pipeline control logic for PIPE. You will ﬁnd that many different combinations
can occur, since many more conditions require the pipeline to stall. Make sure
your control logic handles each combination correctly. See the lab material for
directions on how to generate a simulator for your solution and how to test it.
4.54 ◆◆
The ﬁle pipe-full.hcl contains a copy of the PIPE HCL description, along with a
declaration of the constant value IIADDQ. Modify this ﬁle to implement the iaddq
instruction, as described in Practice Problem 4.3 and Problem 4.51. See the lab
