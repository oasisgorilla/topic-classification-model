1032
Chapter 12
Concurrent Programming
code/conc/badcnt.c
1
/* WARNING: This code is buggy! */
2
#include "csapp.h"
3
4
void *thread(void *vargp);
/* Thread routine prototype */
5
6
/* Global shared variable */
7
volatile long cnt = 0; /* Counter */
8
9
int main(int argc, char **argv)
10
{
11
long niters;
12
pthread_t tid1, tid2;
13
14
/* Check input argument */
15
if (argc != 2) {
16
printf("usage: %s <niters>\n", argv[0]);
17
exit(0);
18
}
19
niters = atoi(argv[1]);
20
21
/* Create threads and wait for them to finish */
22
Pthread_create(&tid1, NULL, thread, &niters);
23
Pthread_create(&tid2, NULL, thread, &niters);
24
Pthread_join(tid1, NULL);
25
Pthread_join(tid2, NULL);
26
27
/* Check result */
28
if (cnt != (2 * niters))
29
printf("BOOM! cnt=%ld\n", cnt);
30
else
31
printf("OK cnt=%ld\n", cnt);
32
exit(0);
33
}
34
35
/* Thread routine */
36
void *thread(void *vargp)
37
{
38
long i, niters = *((long *)vargp);
39
40
for (i = 0; i < niters; i++)
41
cnt++;
42
43
return NULL;
44
}
code/conc/badcnt.c
Figure 12.16
badcnt.c: An improperly synchronized counter program.
