39
CHAPTER  06    코드 혼잡화
중첩 
가능한 한 깊이 중첩하라. 훌륭한 독자는 한 라인에 사용한 10개의 ( 
)를 이해할 수 
있고, 하나의 메소드에 사용한 20개의 { 
}도 이해할 수 있다. C++의 경우 전처리기 
중첩을 이용할 수 있다. 전처리기 중첩은 코드의 중첩 구조와는 독립적이므로 보 
다 강력한 옵션이다. 인쇄된 코드에서 블록의 시작과 끝이 같은 페이지에 나오지 
않게 할 수 있다면 추가 점수를 획득할 수 있다. 가능하다면 중첩된 if 문을 중첩된 
[A?B…] 구문으로 바꾸는 것이 바람직하다. 게다가 한 줄 이상의 코드로 확장할 수 
있다면 금상첨화다. 
숫자 기호 
100개의 요소를 갖는 배열이 있다면 최대한 100이라는 기호를 프로그램에서 가
능한 많이 사용해야 한다. 절대 static final을 붙인 상수로 100을 대체하거나 
myArray.length와 같은 방법을 사용하지 말아야 한다. 상수를 이해하고 대체하
기 어렵게 하려면 100/2보다는 50, 100-1보다는 99와 같이 표기하는 것이 좋다. 
a > 100 보다는 a == 101을 사용하고 a >= 100 보다는 a > 99을 사용하므로 100
이라는 숫자가 사용되지 않은 것처럼 위장할 수 있다. 
헤더에 x개, 바디에 y개, 풋터에 z개 라인을 사용한 페이지 크기가 있다고 가정해
보자. 이 때 난독화를 각각에 적용할 수 있으며 부분합 혹은 전체합에도 적용할 수 
있다. 
이 유서 깊은 기법은 특히 100개의 요소를 갖는 연관성이 없는 두 배열을 갖는 프
로그램에 효과적이다. 유지보수 프로그래머가 둘 중 하나의 배열 크기를 변경하려
면 프로그램에서 사용된 모든 100이라는 기호를 해독해서 어떤 배열에 해당하는 
것인지 이해해야 한다. 이러한 과정에서 그가 적어도 한 번 이상 실수를 저지를 것
이라고 장담할 수 있다. 운이 좋다면 그 에러가 몇 년이 지난 후에야 발견될 수도 
있을 것이다. 
