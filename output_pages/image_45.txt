31
CHAPTER  05    프로그램 디자인
부작용을 일으키게 할 수 있다.
잡동사니 수집
사용하지 않고 오래된 메소드나 변수라 할지라도 모두 코드에 모아준다. 1976년
에 한 번 사용했던 적이 있는 코드라도 언제 어떻게 사용해야 할지 누가 알겠는가? 
항상 프로그램의 변경 사항을 관리하므로 “바퀴를 다시 발명하는 일은 피해”(상사
는 이런 말을 좋아한다)야 한다. 메소드와 변수 주석을 수수께끼처럼 남겨둔다면, 
그 코드를 유지보수해야 할 누군가는 코드를 보고 겁부터 집어먹을 것이다.
final이 주는 즐거움
모든 최종 클래스를 final로 정의하라. 이렇게 프로젝트를 마무리할 수 있다. 즉 아
무도 우리가 만든 클래스를 확장해 작업을 개선시킬 수 없다. 누군가가 우리 클래
스를 확장하면서 발생하는 보안 취약성도 방지할 수 있다. 마찬가지로 java.lang.
String이 final인 이유와 같은 맥락이다. 프로젝트의 다른 코드가 불평한다면 언제
나처럼 이 기법으로 인해 얻고 있는 속도 향상에 대해 얘기해주면 된다.
인터페이스를 피하라
자바에서 인터페이스는 무시해야 할 존재다. 관리자가 이에 대해 불평한다면 자바
의 인터페이스는 우리로 하여금 같은 인터페이스를 구현하는 다른 클래스에서 “잘
라내고 붙이기”를 반복하게 만드는 존재이며 이는 당신도 알다시피 유지보수를 어
렵게 하는 것이라고 말하자. 인터페이스 대신 자바 AWT 설계자의 방식을 따를 수 
있다. AWT 설계자는 특정 클래스와 해당 클래스를 상속하는 클래스에서만 사용
할 수 있는 많은 기능을 추가하고 각 메소드에서는 “instanceof”를 수시로 활용했
다. 누군가가 우리 코드를 재사용하고 싶어한다면 우리 클래스를 상속받도록 할 수 
있다. 혹시 두 개의 다른 클래스를 모두 재사용하고 싶어 하는 이가 있다면, 불행히
도 그렇게 하는 것은 불가능하다! 어쩔 수 없이 인터페이스가 필요한 상황이라면 
“ImplementableIface”와 같은 하나의 인터페이스를 만들어 다용도로 사용할 수 
