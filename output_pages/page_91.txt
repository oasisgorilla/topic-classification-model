90
Chapter 2
Representing and Manipulating Information
2.1.7
Bit-Level Operations in C
One useful feature of C is that it supports bitwise Boolean operations. In fact, the
symbols we have used for the Boolean operations are exactly those used by C:
| for or, & for and, ~ for not, and ^ for exclusive-or. These can be applied to
any “integral” data type, including all of those listed in Figure 2.3. Here are some
examples of expression evaluation for data type char:
C expression
Binary expression
Binary result
Hexadecimal result
~0x41
~[0100 0001]
[1011 1110]
0xBE
~0x00
~[0000 0000]
[1111 1111]
0xFF
0x69 & 0x55
[0110 1001] & [0101 0101]
[0100 0001]
0x41
0x69 | 0x55
[0110 1001] | [0101 0101]
[0111 1101]
0x7D
As our examples show, the best way to determine the effect of a bit-level ex-
pression is to expand the hexadecimal arguments to their binary representations,
perform the operations in binary, and then convert back to hexadecimal.
Practice Problem 2.10 (solution page 182)
As an application of the property that a ^ a = 0 for any bit vector a, consider the
following program:
1
void inplace_swap(int *x, int *y) {
2
*y = *x ^ *y;
/* Step 1 */
3
*x = *x ^ *y;
/* Step 2 */
4
*y = *x ^ *y;
/* Step 3 */
5
}
As the name implies, we claim that the effect of this procedure is to swap
the values stored at the locations denoted by pointer variables x and y. Note
that unlike the usual technique for swapping two values, we do not need a third
location to temporarily store one value while we are moving the other. There is
no performance advantage to this way of swapping; it is merely an intellectual
amusement.
Starting with values a and b in the locations pointed to by x and y, respectively,
ﬁll in the table that follows, giving the values stored at the two locations after each
step of the procedure. Use the properties of ^ to show that the desired effect is
achieved. Recall that every element is its own additive inverse (that is, a ^ a = 0).
Step
*x
*y
Initially
a
b
Step 1
Step 2
Step 3
