564
Chapter 5
Optimizing Program Performance
not taken. We assume this checking can be done quickly enough that it does not
slow down the processor.
In Figure 5.14(b), we have eliminated the operators that were colored white
on the left, and we have retained only the loop registers. What we have left is an
abstract template showing the data dependencies that form among loop registers
due to one iteration of the loop. We can see in this diagram that there are two
data dependencies from one iteration to the next. Along one side, we see the
dependencies between successive values of program value acc, stored in register
%xmm0. The loop computes a new value for acc by multiplying the old value by a
data element, generated by the load operation. Along the other side, we see the
dependencies between successive values of the pointer to the ith data element.
On each iteration, the old value is used as the address for the load operation, and
it is also incremented by the add operation to compute its new value.
Figure 5.15 shows the data-ﬂow representation of n iterations by the inner loop
of function combine4. This graph was obtained by simply replicating the template
shown in Figure 5.14(b) n times. We can see that the program has two chains of data
Figure 5.15
Data-ﬂow representation
of computation by n
iterations of the inner
loop of combine4. The
sequence of multiplication
operations forms a critical
path that limits program
performance.
data[0]
load
Critical path
mul
add
data[1]
load
mul
add
data[n-2]
load
mul
add
data[n-1]
load
mul
add
