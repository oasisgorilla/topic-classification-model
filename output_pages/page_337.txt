336
Chapter 3
Machine-Level Representation of Programs
Practice Problem 3.50 (solution page 383)
For the following C code, the expressions val1–val4 all map to the program values
i, f, d, and l:
double fcvt2(int *ip, float *fp, double *dp, long l)
{
int i = *ip; float f = *fp; double d = *dp;
*ip = (int)
val1;
*fp = (float)
val2;
*dp = (double)
val3;
return (double) val4;
}
Determine the mapping, based on the following x86-64 code for the function:
double fcvt2(int *ip, float *fp, double *dp, long l)
ip in %rdi, fp in %rsi, dp in %rdx, l in %rcx
Result returned in %xmm0
1
fcvt2:
2
movl
(%rdi), %eax
3
vmovss
(%rsi), %xmm0
4
vcvttsd2si
(%rdx), %r8d
5
movl
%r8d, (%rdi)
6
vcvtsi2ss
%eax, %xmm1, %xmm1
7
vmovss
%xmm1, (%rsi)
8
vcvtsi2sdq
%rcx, %xmm1, %xmm1
9
vmovsd
%xmm1, (%rdx)
10
vunpcklps
%xmm0, %xmm0, %xmm0
11
vcvtps2pd
%xmm0, %xmm0
12
ret
Practice Problem 3.51 (solution page 384)
The following C function converts an argument of type src_t to a return value of
type dst_t, where these two types are deﬁned using typedef:
dest_t cvt(src_t x)
{
dest_t y = (dest_t) x;
return y;
}
For execution on x86-64, assume that argument x is either in %xmm0 or in
the appropriately named portion of register %rdi (i.e., %rdi or %edi). One or
two instructions are to be used to perform the type conversion and to copy the
value to the appropriately named portion of register %rax (integer result) or
