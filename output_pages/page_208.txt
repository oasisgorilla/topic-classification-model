Section 3.2
Program Encodings
207
appears to be a very large byte array. The actual implementation of the mem-
ory system involves a combination of multiple hardware memories and operating
system software, as described in Chapter 9.
The compiler does most of the work in the overall compilation sequence,
transforming programs expressed in the relatively abstract execution model pro-
vided by C into the very elementary instructions that the processor executes. The
assembly-code representation is very close to machine code. Its main feature is
that it is in a more readable textual format, as compared to the binary format of
machine code. Being able to understand assembly code and how it relates to the
original C code is a key step in understanding how computers execute programs.
The machine code for x86-64 differs greatly from the original C code. Parts of
the processor state are visible that normally are hidden from the C programmer:
. The program counter (commonly referred to as the PC, and called %rip in x86-
64) indicates the address in memory of the next instruction to be executed.
. The integer register ﬁle contains 16 named locations storing 64-bit values.
These registers can hold addresses (corresponding to C pointers) or integer
data. Some registers are used to keep track of critical parts of the program
state, while others are used to hold temporary data, such as the arguments
and local variables of a procedure, as well as the value to be returned by a
function.
. The condition code registers hold status information about the most recently
executed arithmetic or logical instruction. These are used to implement con-
ditional changes in the control or data ﬂow, such as is required to implement
if and while statements.
. A set of vector registers can each hold one or more integer or ﬂoating-point
values.
Whereas C provides a model in which objects of different data types can be
declared and allocated in memory, machine code views the memory as simply
a large byte-addressable array. Aggregate data types in C such as arrays and
structures are represented in machine code as contiguous collections of bytes.
Even for scalar data types, assembly code makes no distinctions between signed or
unsigned integers, between different types of pointers, or even between pointers
and integers.
The program memory contains the executable machine code for the program,
some information required by the operating system, a run-time stack for managing
procedure calls and returns, and blocks of memory allocated by the user (e.g., by
using the malloc library function). As mentioned earlier, the program memory
is addressed using virtual addresses. At any given time, only limited subranges of
virtual addresses are considered valid. For example, x86-64 virtual addresses are
represented by 64-bit words. In current implementations of these machines, the
upper 16 bits must be set to zero, and so an address can potentially specify a byte
over a range of 248, or 64 terabytes. More typical programs will only have access
to a few megabytes, or perhaps several gigabytes. The operating system manages
