Section 12.6
Using Threads for Parallelism
1051
code/conc/psum-mutex.c
1
#include "csapp.h"
2
#define MAXTHREADS 32
3
4
void *sum_mutex(void *vargp); /* Thread routine */
5
6
/* Global shared variables */
7
long gsum = 0;
/* Global sum */
8
long nelems_per_thread;
/* Number of elements to sum */
9
sem_t mutex;
/* Mutex to protect global sum */
10
11
int main(int argc, char **argv)
12
{
13
long i, nelems, log_nelems, nthreads, myid[MAXTHREADS];
14
pthread_t tid[MAXTHREADS];
15
16
/* Get input arguments */
17
if (argc != 3) {
18
printf("Usage: %s <nthreads> <log_nelems>\n", argv[0]);
19
exit(0);
20
}
21
nthreads = atoi(argv[1]);
22
log_nelems = atoi(argv[2]);
23
nelems = (1L << log_nelems);
24
nelems_per_thread = nelems / nthreads;
25
sem_init(&mutex, 0, 1);
26
27
/* Create peer threads and wait for them to finish */
28
for (i = 0; i < nthreads; i++) {
29
myid[i] = i;
30
Pthread_create(&tid[i], NULL, sum_mutex, &myid[i]);
31
}
32
for (i = 0; i < nthreads; i++)
33
Pthread_join(tid[i], NULL);
34
35
/* Check final answer */
36
if (gsum != (nelems * (nelems-1))/2)
37
printf("Error: result=%ld\n", gsum);
38
39
exit(0);
40
}
code/conc/psum-mutex.c
Figure 12.31
Main routine for psum-mutex. Uses multiple threads to sum the elements
of a sequence into a shared global variable protected by a mutex.
