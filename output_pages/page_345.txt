344
Chapter 3
Machine-Level Representation of Programs
set when S2 < S1. Instructions such as ja and jb are used to conditionally jump on
various combinations of these ﬂags.
As an example of ﬂoating-point comparisons, the C function of Figure 3.51(a)
classiﬁes argument x according to its relation to 0.0, returning an enumerated type
as the result. Enumerated types in C are encoded as integers, and so the possible
function values are: 0 (NEG), 1 (ZERO), 2 (POS), and 3 (OTHER). This ﬁnal outcome
occurs when the value of x is NaN.
Gcc generates the code shown in Figure 3.51(b) for find_range. The code
is not very efﬁcient—it compares x to 0.0 three times, even though the required
information could be obtained with a single comparison. It also generates ﬂoating-
point constant 0.0 twice—once using vxorps, and once by reading the value from
memory. Let us trace the ﬂow of the function for the four possible comparison
results:
x < 0.0
The ja branch on line 4 will be taken, jumping to the end with a return
value of 0.
x = 0.0
The ja (line 4) and jp (line 6) branches will not be taken, but the je
branch (line 8) will, returning with %eax equal to 1.
x > 0.0
None of the three branches will be taken. The setbe (line 11) will yield
0, and this will be incremented by the addl instruction (line 13) to give a
return value of 2.
x = NaN
The jp branch (line 6) will be taken. The third vucomiss instruction
(line 10) will set both the carry and the zero ﬂag, and so the setbe
instruction (line 11) and the following instruction will set %eax to 1. This
gets incremented by the addl instruction (line 13) to give a return value
of 3.
In Homework Problems 3.73 and 3.74, you are challenged to hand-generate
more efﬁcient implementations of find_range.
Practice Problem 3.57 (solution page 386)
Function funct3 has the following prototype:
double funct3(int *ap, double b, long c, float *dp);
For this function, gcc generates the following code:
double funct3(int *ap, double b, long c, float *dp)
ap in %rdi, b in %xmm0, c in %rsi, dp in %rdx
1
funct3:
2
vmovss
(%rdx), %xmm1
3
vcvtsi2sd
(%rdi), %xmm2, %xmm2
4
vucomisd
%xmm2, %xmm0
5
jbe
.L8
6
vcvtsi2ssq
%rsi, %xmm0, %xmm0
7
vmulss
%xmm1, %xmm0, %xmm1
