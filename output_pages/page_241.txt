240
Chapter 3
Machine-Level Representation of Programs
Consider the sete, or “set when equal,” instruction. When a = b, we will
have t = 0, and hence the zero ﬂag indicates equality. Similarly, consider testing
for signed comparison with the setl, or “set when less,” instruction. When no
overﬂow occurs (indicated by having OF set to 0), we will have a < b when a -t
w b <
0, indicated by having SF set to 1, and a ≥b when a -t
w b ≥0, indicated by having
SF set to 0. On the other hand, when overﬂow occurs, we will have a < b when
a -t
w b > 0 (negative overﬂow) and a > b when a -t
w b < 0 (positive overﬂow). We
cannot have overﬂow when a = b. Thus, when OF is set to 1, we will have a < b if
and only if SF is set to 0. Combining these cases, the exclusive-or of the overﬂow
and sign bits provides a test for whether a < b. The other signed comparison tests
are based on other combinations of SF ^ OF and ZF.
For the testing of unsigned comparisons, we now let a and b be the integers
represented in unsigned form by variables a and b. In performing the computation
t = a-b, the carry ﬂag will be set by the cmp instruction when a −b < 0, and so the
unsigned comparisons use combinations of the carry and zero ﬂags.
It is important to note how machine code does or does not distinguish be-
tween signed and unsigned values. Unlike in C, it does not associate a data type
with each program value. Instead, it mostly uses the same instructions for the two
cases, because many arithmetic operations have the same bit-level behavior for
unsigned and two’s-complement arithmetic. Some circumstances require different
instructions to handle signed and unsigned operations, such as using differ-
ent versions of right shifts, division and multiplication instructions, and different
combinations of condition codes.
Practice Problem 3.13 (solution page 366)
The C code
int comp(data_t a, data_t b) {
return a COMP b;
}
shows a general comparison between arguments a and b, where data_t, the data
type of the arguments, is deﬁned (via typedef) to be one of the integer data types
listed in Figure 3.1 and either signed or unsigned. The comparison COMP is deﬁned
via #define.
Suppose a is in some portion of %rdx while b is in some portion of %rsi. For
each of the following instruction sequences, determine which data types data_t
and which comparisons COMP could cause the compiler to generate this code.
(There can be multiple correct answers; you should list them all.)
A.
cmpl
%esi, %edi
setl
%al
B.
cmpw
%si, %di
setge
%al
