Section 3.6
Control
253
Instruction
Synonym
Move condition
Description
cmove
S, R
cmovz
ZF
Equal / zero
cmovne
S, R
cmovnz
~ZF
Not equal / not zero
cmovs
S, R
SF
Negative
cmovns
S, R
~SF
Nonnegative
cmovg
S, R
cmovnle
~(SF ^ OF) & ~ZF
Greater (signed >)
cmovge
S, R
cmovnl
~(SF ^ OF)
Greater or equal (signed >=)
cmovl
S, R
cmovnge
SF ^ OF
Less (signed <)
cmovle
S, R
cmovng
(SF ^ OF) | ZF
Less or equal (signed <=)
cmova
S, R
cmovnbe
~CF & ~ZF
Above (unsigned >)
cmovae
S, R
cmovnb
~CF
Above or equal (Unsigned >=)
cmovb
S, R
cmovnae
CF
Below (unsigned <)
cmovbe
S, R
cmovna
CF | ZF
Below or equal (unsigned <=)
Figure 3.18
The conditional move instructions. These instructions copy the source
value S to its destination R when the move condition holds. Some instructions have
“synonyms,” alternate names for the same machine instruction.
v = test-expr ? then-expr : else-expr;
The standard way to compile this expression using conditional control transfer
would have the following form:
if (!test-expr)
goto false;
v = then-expr;
goto done;
false:
v = else-expr;
done:
This code contains two code sequences—one evaluating then-expr and one evalu-
ating else-expr. A combination of conditional and unconditional jumps is used to
ensure that just one of the sequences is evaluated.
For the code based on a conditional move, both the then-expr and the else-
expr are evaluated, with the ﬁnal value chosen based on the evaluation test-expr.
This can be described by the following abstract code:
v
= then-expr;
ve = else-expr;
t
= test-expr;
if (!t) v = ve;
The ﬁnal statement in this sequence is implemented with a conditional move—
value ve is copied to v only if test condition t does not hold.
