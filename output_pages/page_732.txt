Section 7.8
Executable Object Files
731
A. What is the hex address of the relocated reference to sum in line 5?
B. What is the hex value of the relocated reference to sum in line 5?
Practice Problem 7.5 (solution page 754)
Consider the call to function swap in object ﬁle m.o (Figure 7.5).
9:
e8 00 00 00 00
callq
e <main+0xe>
swap()
with the following relocation entry:
r.offset = 0xa
r.symbol = swap
r.type
= R_X86_64_PC32
r.addend = -4
Now suppose that the linker relocates .text in m.o to address 0x4004d0 and swap
to address 0x4004e8. Then what is the value of the relocated reference to swap in
the callq instruction?
7.8
Executable Object Files
We have seen how the linker merges multiple object ﬁles into a single executable
object ﬁle. Our example C program, which began life as a collection of ASCII
text ﬁles, has been transformed into a single binary ﬁle that contains all of the
information needed to load the program into memory and run it. Figure 7.13
summarizes the kinds of information in a typical ELF executable ﬁle.
Section header table 
Describes
object file
sections
Maps contiguous file
sections to run-time
memory segments
.strtab
.line
.debug
.symtab
.bss
.data
.rodata
.text
.init
Segment header table
ELF header
0
Read-only memory segment 
(code segment)
Read/write memory segment 
(data segment)
Symbol table and
debugging info are not
loaded into memory
Figure 7.13
Typical ELF executable object ﬁle.
