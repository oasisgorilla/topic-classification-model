62
Chapter 1
A Tour of Computer Systems
the hardware. Chapter 12 will look much more deeply into concurrency and its
use to provide a sharing of processing resources and to enable more parallelism
in program execution.
Instruction-Level Parallelism
At a much lower level of abstraction, modern processors can execute multiple
instructions at one time, a property known as instruction-level parallelism. For
example, early microprocessors, such as the 1978-vintage Intel 8086, required
multiple (typically 3–10) clock cycles to execute a single instruction. More recent
processors can sustain execution rates of 2–4 instructions per clock cycle. Any
given instruction requires much longer from start to ﬁnish, perhaps 20 cycles or
more, but the processor uses a number of clever tricks to process as many as 100
instructions at a time. In Chapter 4, we will explore the use of pipelining, where the
actions required to execute an instruction are partitioned into different steps and
the processor hardware is organized as a series of stages, each performing one
of these steps. The stages can operate in parallel, working on different parts of
different instructions. We will see that a fairly simple hardware design can sustain
an execution rate close to 1 instruction per clock cycle.
Processors that can sustain execution rates faster than 1 instruction per cycle
are known as superscalar processors. Most modern processors support superscalar
operation. In Chapter 5, we will describe a high-level model of such processors.
We will see that application programmers can use this model to understand the
performance of their programs. They can then write programs such that the gen-
erated code achieves higher degrees of instruction-level parallelism and therefore
runs faster.
Single-Instruction, Multiple-Data (SIMD) Parallelism
At the lowest level, many modern processors have special hardware that allows
a single instruction to cause multiple operations to be performed in parallel, a
mode known as single-instruction, multiple-data (SIMD) parallelism. For example,
recent generations of Intel and AMD processors have instructions that can add 8
pairs of single-precision ﬂoating-point numbers (C data type float) in parallel.
These SIMD instructions are provided mostly to speed up applications that
process image, sound, and video data. Although some compilers attempt to auto-
matically extract SIMD parallelism from C programs, a more reliable method is to
write programs using special vector data types supported in compilers such as gcc.
We describe this style of programming in Web Aside opt:simd, as a supplement to
the more general presentation on program optimization found in Chapter 5.
1.9.3
The Importance of Abstractions in Computer Systems
The use of abstractions is one of the most important concepts in computer science.
For example, one aspect of good programming practice is to formulate a simple
application program interface (API) for a set of functions that allow programmers
to use the code without having to delve into its inner workings. Different program-
