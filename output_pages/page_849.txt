848
Chapter 9
Virtual Memory
grows downward. Such uniformity greatly simpliﬁes the design and implemen-
tation of linkers, allowing them to produce fully linked executables that are
independent of the ultimate location of the code and data in physical memory.
. Simplifying loading. Virtual memory also makes it easy to load executable
and shared object ﬁles into memory. To load the .text and .data sections of
an object ﬁle into a newly created process, the Linux loader allocates virtual
pages for the code and data segments, marks them as invalid (i.e., not cached),
and points their page table entries to the appropriate locations in the object
ﬁle. The interesting point is that the loader never actually copies any data
from disk into memory. The data are paged in automatically and on demand
by the virtual memory system the ﬁrst time each page is referenced, either by
the CPU when it fetches an instruction or by an executing instruction when it
references a memory location.
This notion of mapping a set of contiguous virtual pages to an arbitrary
location in an arbitrary ﬁle is known as memory mapping. Linux provides
a system call called mmap that allows application programs to do their own
memory mapping. We will describe application-level memory mapping in
more detail in Section 9.8.
. Simplifying sharing. Separate address spaces provide the operating system
with a consistent mechanism for managing sharing between user processes
and the operating system itself. In general, each process has its own private
code, data, heap, and stack areas that are not shared with any other process. In
this case, the operating system creates page tables that map the corresponding
virtual pages to disjoint physical pages.
However, in some instances it is desirable for processes to share code
and data. For example, every process must call the same operating system
kernel code, and every C program makes calls to routines in the standard C
library such as printf. Rather than including separate copies of the kernel
and standard C library in each process, the operating system can arrange
for multiple processes to share a single copy of this code by mapping the
appropriate virtual pages in different processes to the same physical pages,
as we saw in Figure 9.9.
. Simplifying memory allocation.Virtual memory provides a simple mechanism
for allocating additional memory to user processes. When a program running
in a user process requests additional heap space (e.g., as a result of calling
malloc), the operating system allocates an appropriate number, say, k, of
contiguous virtual memory pages, and maps them to k arbitrary physical pages
located anywhere in physical memory. Because of the way page tables work,
there is no need for the operating system to locate k contiguous pages of
physical memory. The pages can be scattered randomly in physical memory.
9.5
VM as a Tool for Memory Protection
Any modern computer system must provide the means for the operating system
to control access to the memory system. A user process should not be allowed
