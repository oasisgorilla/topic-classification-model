Section 4.3
Sequential Y86-64 Implementations
421
Decode. The decode stage reads up to two operands from the register ﬁle, giving
values valA and/or valB. Typically, it reads the registers designated by
instruction ﬁelds rA and rB, but for some instructions it reads register %rsp.
Execute. In the execute stage, the arithmetic/logic unit (ALU) either performs
the operation speciﬁed by the instruction (according to the value of ifun),
computes the effective address of a memory reference, or increments or
decrements the stack pointer. We refer to the resulting value as valE. The
condition codes are possibly set. For a conditional move instruction, the
stage will evaluate the condition codes and move condition (given by ifun)
and enable the updating of the destination register only if the condition
holds. Similarly, for a jump instruction, it determines whether or not the
branch should be taken.
Memory. The memory stage may write data to memory, or it may read data
from memory. We refer to the value read as valM.
Write back. The write-back stage writes up to two results to the register ﬁle.
PC update. The PC is set to the address of the next instruction.
The processor loops indeﬁnitely, performing these stages. In our simpliﬁed im-
plementation, the processor will stop when any exception occurs—that is, when it
executes a halt or invalid instruction, or it attempts to read or write an invalid ad-
dress. In a more complete design, the processor would enter an exception-handling
mode and begin executing special code determined by the type of exception.
As can be seen by the preceding description, there is a surprising amount of
processing required to execute a single instruction. Not only must we perform
the stated operation of the instruction, we must also compute addresses, update
stack pointers, and determine the next instruction address. Fortunately, the overall
ﬂow can be similar for every instruction. Using a very simple and uniform struc-
ture is important when designing hardware, since we want to minimize the total
amount of hardware and we must ultimately map it onto the two-dimensional
surface of an integrated-circuit chip. One way to minimize the complexity is to
have the different instructions share as much of the hardware as possible. For
example, each of our processor designs contains a single arithmetic/logic unit
that is used in different ways depending on the type of instruction being exe-
cuted. The cost of duplicating blocks of logic in hardware is much higher than
the cost of having multiple copies of code in software. It is also more difﬁcult to
deal with many special cases and idiosyncrasies in a hardware system than with
software.
Our challenge is to arrange the computing required for each of the different
instructions to ﬁt within this general framework. We will use the code shown in
Figure 4.17 to illustrate the processing of different Y86-64 instructions. Figures
4.18 through 4.21 contain tables describing how the different Y86-64 instructions
proceed through the stages. It is worth the effort to study these tables carefully.
They are in a form that enables a straightforward mapping into the hardware.
Each line in these tables describes an assignment to some signal or stored state
