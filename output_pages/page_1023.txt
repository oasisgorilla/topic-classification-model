1022
Chapter 12
Concurrent Programming
This section introduces a third approach—based on threads—that is a hybrid of
these two.
A thread is a logical ﬂow that runs in the context of a process. Thus far
in this book, our programs have consisted of a single thread per process. But
modern systems also allow us to write programs that have multiple threads running
concurrently in a single process. The threads are scheduled automatically by the
kernel. Each thread has its own thread context, including a unique integer thread
ID (TID), stack, stack pointer, program counter, general-purpose registers, and
condition codes. All threads running in a process share the entire virtual address
space of that process.
Logical ﬂows based on threads combine qualities of ﬂows based on processes
and I/O multiplexing. Like processes, threads are scheduled automatically by the
kernel and are known to the kernel by an integer ID. Like ﬂows based on I/O
multiplexing, multiple threads run in the context of a single process, and thus they
share the entire contents of the process virtual address space, including its code,
data, heap, shared libraries, and open ﬁles.
12.3.1
Thread Execution Model
The execution model for multiple threads is similar in some ways to the execution
model for multiple processes. Consider the example in Figure 12.12. Each process
begins life as a single thread called the main thread. At some point, the main thread
creates a peer thread, and from this point in time the two threads run concurrently.
Eventually, control passes to the peer thread via a context switch, either because
the main thread executes a slow system call such as read or sleep or because it
is interrupted by the system’s interval timer. The peer thread executes for a while
before control passes back to the main thread, and so on.
Thread execution differs from processes in some important ways. Because a
thread context is much smaller than a process context, a thread context switch is
faster than a process context switch. Another difference is that threads, unlike pro-
cesses, are not organized in a rigid parent-child hierarchy. The threads associated
Figure 12.12
Concurrent thread
execution.
Thread 1
(main thread)
Thread 2
(peer thread)
Time
Thread context switch
Thread context switch
Thread context switch
