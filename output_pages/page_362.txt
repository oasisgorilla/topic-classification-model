Solutions to Practice Problems
361
11
double complex c_sub(double complex x, double complex y) {
12
return x - y;
13
}
When compiled, gcc generates the following assembly code for these func-
tions:
double c_imag(double complex x)
1
c_imag:
2
movapd
%xmm1, %xmm0
3
ret
double c_real(double complex x)
4
c_real:
5
rep; ret
double complex c_sub(double complex x, double complex y)
6
c_sub:
7
subsd
%xmm2, %xmm0
8
subsd
%xmm3, %xmm1
9
ret
Based on these examples, determine the following:
A. How are complex arguments passed to a function?
B. How are complex values returned from a function?
Solutions to Practice Problems
Solution to Problem 3.1 (page 218)
This exercise gives you practice with the different operand forms.
Operand
Value
Comment
%rax
0x100
Register
0x104
0xAB
Absolute address
$0x108
0x108
Immediate
(%rax)
0xFF
Address 0x100
4(%rax)
0xAB
Address 0x104
9(%rax,%rdx)
0x11
Address 0x10C
260(%rcx,%rdx)
0x13
Address 0x108
0xFC(,%rcx,4)
0xFF
Address 0x100
(%rax,%rdx,4)
0x11
Address 0x10C
Solution to Problem 3.2 (page 221)
As we have seen, the assembly code generated by gcc includes sufÔ¨Åxes on the
instructions, while the disassembler does not. Being able to switch between these
