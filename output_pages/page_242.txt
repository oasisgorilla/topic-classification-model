Section 3.6
Control
241
C.
cmpb
%sil, %dil
setbe
%al
D.
cmpq
%rsi, %rdi
setne
%a
Practice Problem 3.14 (solution page 366)
The C code
int test(data_t a) {
return a TEST 0;
}
shows a general comparison between argument a and 0, where we can set the
data type of the argument by declaring data_t with a typedef, and the nature
of the comparison by declaring TEST with a #define declaration. The following
instruction sequences implement the comparison, where a is held in some portion
of register %rdi. For each sequence, determine which data types data_t and which
comparisons TEST could cause the compiler to generate this code. (There can be
multiple correct answers; list all correct ones.)
A.
testq
%rdi, %rdi
setge
%al
B.
testw
%di, %di
sete
%al
C.
testb
%dil, %dil
seta
%al
D.
testl
%edi, %edi
setle
%al
3.6.3
Jump Instructions
Under normal execution, instructions follow each other in the order they are
listed. A jump instruction can cause the execution to switch to a completely
new position in the program. These jump destinations are generally indicated in
assembly code by a label. Consider the following (very contrived) assembly-code
sequence:
movq $0,%rax
Set %rax to 0
jmp .L1
Goto .L1
movq (%rax),%rdx
Null pointer dereference (skipped)
.L1:
popq %rdx
Jump target
