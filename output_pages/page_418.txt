Section 4.2
Logic Design and the Hardware Control Language HCL
417
In this circuit, the 2-bit signal code would then control the selection among the
four data words A, B, C, and D. We can express the generation of signals s1 and s0
using equality tests based on the possible values of code:
bool s1 = code == 2 || code == 3;
bool s0 = code == 1 || code == 3;
A more concise expression can be written that expresses the property that s1
is 1 when code is in the set {2, 3}, and s0 is 1 when code is in the set {1, 3}:
bool s1 = code in { 2, 3 };
bool s0 = code in { 1, 3 };
The general form of a set membership test is
iexpr in {iexpr1, iexpr2,
. . . , iexprk}
where the value being tested (iexpr) and the candidate matches (iexpr1 through
iexprk) are all integer expressions.
4.2.5
Memory and Clocking
Combinational circuits, by their very nature, do not store any information. Instead,
they simply react to the signals at their inputs, generating outputs equal to some
function of the inputs. To create sequential circuits—that is, systems that have state
and perform computations on that state—we must introduce devices that store
information represented as bits. Our storage devices are all controlled by a single
clock, a periodic signal that determines when new values are to be loaded into the
devices. We consider two classes of memory devices:
Clocked registers (or simply registers) store individual bits or words. The clock
signal controls the loading of the register with the value at its input.
Random access memories (or simply memories) store multiple words, using
an address to select which word should be read or written. Examples
of random access memories include (1) the virtual memory system of
a processor, where a combination of hardware and operating system
software make it appear to a processor that it can access any word within
a large address space; and (2) the register ﬁle, where register identiﬁers
serve as the addresses. In a Y86-64 processor, the register ﬁle holds the
15 program registers (%rax through %r14).
As we can see, the word “register” means two slightly different things when
speaking of hardware versus machine-language programming. In hardware, a
register is directly connected to the rest of the circuit by its input and output
wires. In machine-level programming, the registers represent a small collection
of addressable words in the CPU, where the addresses consist of register IDs.
These words are generally stored in the register ﬁle, although we will see that the
hardware can sometimes pass a word directly from one instruction to another to
