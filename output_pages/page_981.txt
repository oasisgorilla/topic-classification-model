980
Chapter 11
Network Programming
The open_listenfd Function
A server creates a listening descriptor that is ready to receive connection requests
by calling the open_listenfd function.
#include "csapp.h"
int open_listenfd(char *port);
Returns: descriptor if OK, −1 on error
The open_listenfd function returns a listening descriptor that is ready to receive
connection requests on portport. Figure 11.19 shows the code foropen_listenfd.
The style is similar to open_clientfd. We call getaddrinfo and then walk
the resulting list until the calls to socket and bind succeed. Note that in line 20
we use the setsockopt function (not described here) to conﬁgure the server so
that it can be terminated, be restarted, and begin accepting connection requests
immediately. By default, a restarted server will deny connection requests from
clients for approximately 30 seconds, which seriously hinders debugging.
Since we have called getaddrinfo with the AI_PASSIVE ﬂag and a NULL
host argument, the address ﬁeld in each socket address structure is set to the
wildcard address, which tells the kernel that this server will accept requests to any
of the IP addresses for this host.
Finally, we call the listen function to convert listenfd to a listening descrip-
tor and return it to the caller. If the listen fails, we are careful to avoid a memory
leak by closing the descriptor before returning.
11.4.9
Example Echo Client and Server
The best way to learn the sockets interface is to study example code. Figure 11.20
shows the code for an echo client. After establishing a connection with the server,
the client enters a loop that repeatedly reads a text line from standard input, sends
the text line to the server, reads the echo line from the server, and prints the result
to standard output. The loop terminates when fgets encounters EOF on standard
input, either because the user typed Ctrl+D at the keyboard or because it has
exhausted the text lines in a redirected input ﬁle.
After the loop terminates, the client closes the descriptor. This results in an
EOF notiﬁcation being sent to the server, which it detects when it receives a return
code of zero from its rio_readlineb function. After closing its descriptor, the
client terminates. Since the client’s kernel automatically closes all open descriptors
when a process terminates, the close in line 24 is not necessary. However, it is good
programming practice to explicitly close any descriptors that you have opened.
Figure 11.21 shows the main routine for the echo server. After opening the
listening descriptor, it enters an inﬁnite loop. Each iteration waits for a connection
request from a client, prints the domain name and port of the connected client, and
then calls the echo function that services the client. After the echo routine returns,
