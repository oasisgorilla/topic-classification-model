260
Chapter 3
Machine-Level Representation of Programs
(a) C code
long fact_while(long n)
{
long result = 1;
while (n > 1) {
result *= n;
n = n-1;
}
return result;
}
(b) Equivalent goto version
long fact_while_jm_goto(long n)
{
long result = 1;
goto test;
loop:
result *= n;
n = n-1;
test:
if (n > 1)
goto loop;
return result;
}
(c) Corresponding assembly-language code
long fact_while(long n)
n in %rdi
fact_while:
movl
$1, %eax
Set result = 1
jmp
.L5
Goto test
.L6:
loop:
imulq
%rdi, %rax
Compute result *= n
subq
$1, %rdi
Decrement n
.L5:
test:
cmpq
$1, %rdi
Compare n:1
jg
.L6
If >, goto loop
rep; ret
Return
Figure 3.20
C and assembly code for while version of factorial using jump-to-
middle translation. The C function fact_while_jm_goto illustrates the operation of
the assembly-code version.
function fact_while_jm_goto (Figure 3.20(b)) is a C rendition of the assembly
code generated by gcc when optimization is speciﬁed with the command-line op-
tion -Og. Comparing the goto code generated for fact_while (Figure 3.20(b)) to
that for fact_do (Figure 3.19(b)), we see that they are very similar, except that
the statement goto test before the loop causes the program to ﬁrst perform the
test of n before modifying the values of result or n. The bottom portion of the
ﬁgure (Figure 3.20(c)) shows the actual assembly code generated.
Practice Problem 3.24 (solution page 371)
For C code having the general form
short loop_while(short a, short b)
{
