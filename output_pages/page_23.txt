22
Preface
material describing processor designs using the Verilog hardware description lan-
guage, supplementing the presentation of processor design in Chapter 4. All of
these Web asides are available from the CS:APP Web page.
Book Overview
The CS:APP book consists of 12 chapters designed to capture the core ideas in
computer systems. Here is an overview.
Chapter 1: A Tour of Computer Systems. This chapter introduces the major ideas
and themes in computer systems by tracing the life cycle of a simple “hello,
world” program.
Chapter 2: Representing and Manipulating Information. We cover computer arith-
metic, emphasizing the properties of unsigned and two’s-complement num-
ber representations that affect programmers. We consider how numbers
are represented and therefore what range of values can be encoded for
a given word size. We consider the effect of casting between signed and
unsigned numbers. We cover the mathematical properties of arithmetic op-
erations. Novice programmers are often surprised to learn that the (two’s-
complement) sum or product of two positive numbers can be negative. On
the other hand, two’s-complement arithmetic satisﬁes many of the algebraic
properties of integer arithmetic, and hence a compiler can safely transform
multiplication by a constant into a sequence of shifts and adds. We use the
bit-level operations of C to demonstrate the principles and applications of
Boolean algebra. We cover the IEEE ﬂoating-point format in terms of how
it represents values and the mathematical properties of ﬂoating-point oper-
ations.
Having a solid understanding of computer arithmetic is critical to writ-
ing reliable programs. For example, programmers and compilers cannot re-
place the expression (x<y) with (x-y < 0), due to the possibility of overﬂow.
They cannot even replace it with the expression (-y < -x), due to the asym-
metric range of negative and positive numbers in the two’s-complement
representation. Arithmetic overﬂow is a common source of programming
errors and security vulnerabilities, yet few other books cover the properties
of computer arithmetic from a programmer’s perspective.
Chapter 3: Machine-Level Representation of Programs. We teach you how to read
the x86-64 machine code generated by a C compiler. We cover the ba-
sic instruction patterns generated for different control constructs, such as
conditionals, loops, and switch statements. We cover the implementation
of procedures, including stack allocation, register usage conventions, and
parameter passing. We cover the way different data structures such as struc-
tures, unions, and arrays are allocated and accessed. We cover the instruc-
tions that implement both integer and ﬂoating-point arithmetic. We also
use the machine-level view of programs as a way to understand common
code security vulnerabilities, such as buffer overﬂow, and steps that the pro-
