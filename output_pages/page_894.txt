Section 9.9
Dynamic Memory Allocation
893
code/vm/malloc/mm.c
1
/* Basic constants and macros */
2
#define WSIZE
4
/* Word and header/footer size (bytes) */
3
#define DSIZE
8
/* Double word size (bytes) */
4
#define CHUNKSIZE
(1<<12)
/* Extend heap by this amount (bytes) */
5
6
#define MAX(x, y) ((x) > (y)? (x) : (y))
7
8
/* Pack a size and allocated bit into a word */
9
#define PACK(size, alloc)
((size) | (alloc))
10
11
/* Read and write a word at address p */
12
#define GET(p)
(*(unsigned int *)(p))
13
#define PUT(p, val)
(*(unsigned int *)(p) = (val))
14
15
/* Read the size and allocated fields from address p */
16
#define GET_SIZE(p)
(GET(p) & ~0x7)
17
#define GET_ALLOC(p) (GET(p) & 0x1)
18
19
/* Given block ptr bp, compute address of its header and footer */
20
#define HDRP(bp)
((char *)(bp) - WSIZE)
21
#define FTRP(bp)
((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)
22
23
/* Given block ptr bp, compute address of next and previous blocks */
24
#define NEXT_BLKP(bp)
((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)))
25
#define PREV_BLKP(bp)
((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))
code/vm/malloc/mm.c
Figure 9.43
Basic constants and macros for manipulating the free list.
Creating the Initial Free List
Before calling mm_malloc or mm_free, the application must initialize the heap by
calling the mm_init function (Figure 9.44).
The mm_init function gets four words from the memory system and initializes
them to create the empty free list (lines 4–10). It then calls the extend_heap
function (Figure 9.45), which extends the heap by CHUNKSIZE bytes and creates
the initial free block. At this point, the allocator is initialized and ready to accept
allocate and free requests from the application.
The extend_heap function is invoked in two different circumstances: (1) when
the heap is initialized and (2) when mm_malloc is unable to ﬁnd a suitable ﬁt. To
maintain alignment, extend_heap rounds up the requested size to the nearest
