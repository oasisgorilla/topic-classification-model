55
CHAPTER  09    발상의 전환
직접 만들어라
우리는 늘 시스템 수준 코드를 직접 만들어보길 원한다. 지금이 바로 시스템 수준 
코드를 작성해 볼 기회다. 표준 라이브러리는 무시하고 자신만의 라이브러리를 만
들어보자. 이것이 우리의 이력서를 빚낼 것이다.
자신만의 BNF 만들기
항상 자신만의 명령어 문법을 독창적이고 알려지지 않은 BNF 표기법으로 문서화
하자. 학습 열의를 떨어뜨릴 수 있으므로, 유효한 커맨드와 유효하지 않은 커맨드
와 같은 샘플을 추가하면서까지 문법을 설명하는 것을 피해야 한다. 대충 그린 열
차 다이어그램 정도면 충분하다. 각각의 심볼(문법에서 한 구문을 가리키는)이 명
확히 무엇을 나타내는지 알 수 없게 해야 한다. 활자체, 컬러, 대문자 등과 같이 두 
사물을 구분하는 데 도움이 되는 어떤 시각효과도 사용하지 않는 것이 바람직하
다. 우리의 명령어 자체의 BNF 표기에서는 항상 같은 구두 문자를 사용해야 한다. 
(...), [...], {...} , “...”와 같은 경우 독자는 구두점이 명령어의 일부인지, 꼭 있어야 
하는 것인지, 옵션 사항인지 구별하기가 힘들어진다. 결국 우리가 만든 BNF를 이해
하지 못할 정도로 멍청한 자들은 우리 프로그램을 사용할 자격을 상실하는 것이다.
자신만의 할당자를 만들어라
동적 저장소 디버깅이 복잡하고 시간이 많이 걸린다는 것은 모두가 아는 사실이다. 
각 클래스에서 저장소를 낭비하지 않는다는 사실을 일일이 확인하는 것보다는 큰 
저장소의 공간을 할당해주는 자신만의 저장소 할당자를 만드는 것이 바람직하다. 
저장소를 직접 해제하는 것보다는 주기적으로 시스템을 리셋해서 힙을 정리하게 
만들어야 한다. 리셋을 이용하면 시스템에서 처리해야 할 일(모든 저장소 누수를 
확인하지 않아도 되므로)이 크게 줄어든다. 따라서 사용자가 시스템을 주기적으로 
리셋하는 것을 까먹지 않는 한 힙 메모리 공간을 모두 사용하는 일이 없다. 프로그
램을 배포한 다음에 이와 같은 동작을 바꾸려고 낑낑대는 이들의 모습이 떠오르지 
않는가?
