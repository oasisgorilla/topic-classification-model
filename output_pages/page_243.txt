242
Chapter 3
Machine-Level Representation of Programs
Instruction
Synonym
Jump condition
Description
jmp
Label
1
Direct jump
jmp
*Operand
1
Indirect jump
je
Label
jz
ZF
Equal / zero
jne
Label
jnz
~ZF
Not equal / not zero
js
Label
SF
Negative
jns
Label
~SF
Nonnegative
jg
Label
jnle
~(SF ^ OF) & ~ZF
Greater (signed >)
jge
Label
jnl
~(SF ^ OF)
Greater or equal (signed >=)
jl
Label
jnge
SF ^ OF
Less (signed <)
jle
Label
jng
(SF ^ OF) | ZF
Less or equal (signed <=)
ja
Label
jnbe
~CF & ~ZF
Above (unsigned >)
jae
Label
jnb
~CF
Above or equal (unsigned >=)
jb
Label
jnae
CF
Below (unsigned <)
jbe
Label
jna
CF | ZF
Below or equal (unsigned <=)
Figure 3.15
The jump instructions. These instructions jump to a labeled destination
when the jump condition holds. Some instructions have “synonyms,” alternate names
for the same machine instruction.
The instruction jmp .L1 will cause the program to skip over the movq instruc-
tion and instead resume execution with the popq instruction. In generating the
object-code ﬁle, the assembler determines the addresses of all labeled instruc-
tions and encodes the jump targets (the addresses of the destination instructions)
as part of the jump instructions.
Figure 3.15 shows the different jump instructions. The jmp instruction jumps
unconditionally. It can be either a direct jump, where the jump target is encoded
as part of the instruction, or an indirect jump, where the jump target is read from
a register or a memory location. Direct jumps are written in assembly code by
giving a label as the jump target, for example, the label .L1 in the code shown.
Indirect jumps are written using ‘*’ followed by an operand speciﬁer using one of
the memory operand formats described in Figure 3.3. As examples, the instruction
jmp *%rax
uses the value in register %rax as the jump target, and the instruction
jmp *(%rax)
reads the jump target from memory, using the value in %rax as the read address.
The remaining jump instructions in the table are conditional—they either
jump or continue executing at the next instruction in the code sequence, depending
on some combination of the condition codes. The names of these instructions
