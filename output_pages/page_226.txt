Section 3.4
Accessing Information
225
char
unsigned
unsigned char
long
int
char
unsigned
unsigned char
char
short
Practice Problem 3.5 (solution page 363)
You are given the following information. A function with prototype
void decode1(long *xp, long *yp, long *zp);
is compiled into assembly code, yielding the following:
void decode1(long *xp, long *yp, long *zp)
xp in %rdi, yp in %rsi, zp in %rdx
decode1:
movq
(%rdi), %r8
movq
(%rsi), %rcx
movq
(%rdx), %rax
movq
%r8, (%rsi)
movq
%rcx, (%rdx)
movq
%rax, (%rdi)
ret
Parameters xp, yp, and zp are stored in registers %rdi, %rsi, and %rdx, respec-
tively.
Write C code for decode1 that will have an effect equivalent to the assembly
code shown.
3.4.4
Pushing and Popping Stack Data
The ﬁnal two data movement operations are used to push data onto and pop data
from the program stack, as documented in Figure 3.8. As we will see, the stack
plays a vital role in the handling of procedure calls. By way of background, a stack
is a data structure where values can be added or deleted, but only according to
a “last-in, ﬁrst-out” discipline. We add data to a stack via a push operation and
remove it via a pop operation, with the property that the value popped will always
be the value that was most recently pushed and is still on the stack. A stack can be
implemented as an array, where we always insert and remove elements from one
