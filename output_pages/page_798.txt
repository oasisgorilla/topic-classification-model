Section 8.5
Signals
797
Typing Ctrl+C at the keyboard causes the kernel to send a SIGINT signal to
every process in the foreground process group. In the default case, the result is to
terminate the foreground job. Similarly, typing Ctrl+Z causes the kernel to send a
SIGTSTP signal to every process in the foreground process group. In the default
case, the result is to stop (suspend) the foreground job.
Sending Signals with the kill Function
Processes send signals to other processes (including themselves) by calling the
kill function.
#include <sys/types.h>
#include <signal.h>
int kill(pid_t pid, int sig);
Returns: 0 if OK, âˆ’1 on error
If pid is greater than zero, then the kill function sends signal number sig to
process pid. If pid is equal to zero, then kill sends signal sig to every process
in the process group of the calling process, including the calling process itself. If
pid is less than zero, then kill sends signal sig to every process in process group
|pid| (the absolute value of pid). Figure 8.29 shows an example of a parent that
uses the kill function to send a SIGKILL signal to its child.
code/ecf/kill.c
1
#include "csapp.h"
2
3
int main()
4
{
5
pid_t pid;
6
7
/* Child sleeps until SIGKILL signal received, then dies */
8
if ((pid = Fork()) == 0) {
9
Pause();
/* Wait for a signal to arrive */
10
printf("control should never reach here!\n");
11
exit(0);
12
}
13
14
/* Parent sends a SIGKILL signal to a child */
15
Kill(pid, SIGKILL);
16
exit(0);
17
}
code/ecf/kill.c
Figure 8.29
Using the kill function to send a signal to a child.
