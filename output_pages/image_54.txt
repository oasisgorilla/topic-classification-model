40
CHAPTER  06    코드 혼잡화
더 사악한 변형 기법도 있다. 매우 가끔 “우발적으로” 100을 사용하므로 유지보수 
프로그래머를 안심시킬 수 있다. 가장 사악한 방법은 100이나 이름을 붙인 상수를 
쓰지 않고 산발적으로 우연히 100 값을 갖는 상수를 사용하는 것이다. 당연히 배
열의 크기를 연상시키는 어떠한 이름도 사용하지 말아야 한다. 
C의 기이한 배열 접근법 
C 컴파일러는 myArray[i]를 *(myArray+i)로 변환하는데 이는 *(i+myArray)과 
같고 이는 i[myArray]과 같다. 전문가들은 이와 같은 사실을 어떻게 활용해야 할
지 알고 있다. 인덱스를 생성하는 함수를 이용하므로 이 사실을 숨길 수 있다. 
int myfunc(int q, int p) { return p%q; } 
... 
myfunc(6291, 8)[Array]; 
불행히도 이 기법은 네이티브 C 클래스에서만 사용할 수 있으며 자바에서는 사용
할 수 없다. 
긴 줄 
가능하면 많은 내용을 한 줄에 담으려 노력하라. 이 기법은 임시 변수를 줄이고, 줄 
바꿈 문자나 공백 문자를 제거함으로써 소스파일 크기를 줄이는 효과를 제공한다. 
좋은 프로그래머는 몇몇 편집기의 한 줄에 들어갈 수 있는 문자 크기의 한계인 255 
문자까지 활용하기도 한다. 글자 크기를 6으로 맞추었을 때 글자를 읽지 못한다면 
스크롤해서 읽도록 길게 코딩하는 것이 정석이다. 
예외 
거의 알려지지 않은 코딩 비밀을 공유하려고 한다. 예외의 이면에는 고통이 숨겨져 
있다. 제대로 구현한 코드는 실패할 일이 없으므로 예외 자체가 필요 없게 된다. 따
라서 예외에 시간낭비할 필요가 없다. 예외를 상속하는 것은 자신의 코드에 문제가 
있음을 인정하는 무능력자가 하는 짓이다. 일반적으로는 전체 응용프로그램을 감
This eBook is licensed to 남궁진(jinvicky@naver.com). Personal use only
