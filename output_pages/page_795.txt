794
Chapter 8
Exceptional Control Flow
the occurrence of such exceptions to user processes. For example, if a process at-
tempts to divide by zero, then the kernel sends it a SIGFPE signal (number 8).
If a process executes an illegal instruction, the kernel sends it a SIGILL signal
(number 4). If a process makes an illegal memory reference, the kernel sends it a
SIGSEGV signal (number 11). Other signals correspond to higher-level software
events in the kernel or in other user processes. For example, if you type Ctrl+C
(i.e., press the Ctrl key and the ‘c’ key at the same time) while a process is running
in the foreground, then the kernel sends a SIGINT (number 2) to each process in
the foreground process group. A process can forcibly terminate another process
by sending it a SIGKILL signal (number 9). When a child process terminates or
stops, the kernel sends a SIGCHLD signal (number 17) to the parent.
8.5.1
Signal Terminology
The transfer of a signal to a destination process occurs in two distinct steps:
Sending a signal. The kernel sends (delivers) a signal to a destination process by
updating some state in the context of the destination process. The signal
is delivered for one of two reasons: (1) The kernel has detected a system
event such as a divide-by-zero error or the termination of a child process.
(2) A process has invoked thekill function (discussed in the next section)
to explicitly request the kernel to send a signal to the destination process.
A process can send a signal to itself.
Receiving a signal. A destination process receives a signal when it is forced by
the kernel to react in some way to the delivery of the signal. The process
can either ignore the signal, terminate, or catch the signal by executing
a user-level function called a signal handler. Figure 8.27 shows the basic
idea of a handler catching a signal.
A signal that has been sent but not yet received is called a pending signal. At
any point in time, there can be at most one pending signal of a particular type.
If a process has a pending signal of type k, then any subsequent signals of type
k sent to that process are not queued; they are simply discarded. A process can
selectively block the receipt of certain signals. When a signal is blocked, it can be
Figure 8.27
Signal handling. Receipt
of a signal triggers a
control transfer to a signal
handler. After it ﬁnishes
processing, the handler
returns control to the
interrupted program.
(2) Control passes
to signal handler
(3) Signal
handler runs
(4) Signal handler 
returns to 
next instruction
(1) Signal received
by process
Icurr
Inext
