838
Chapter 9
Virtual Memory
P
rocesses in a system share the CPU and main memory with other processes.
However, sharing the main memory poses some special challenges. As demand
on the CPU increases, processes slow down in some reasonably smooth way. But
if too many processes need too much memory, then some of them will simply
not be able to run. When a program is out of space, it is out of luck. Memory is
also vulnerable to corruption. If some process inadvertently writes to the memory
used by another process, that process might fail in some bewildering fashion totally
unrelated to the program logic.
In order to manage memory more efﬁciently and with fewer errors, modern
systems provide an abstraction of main memory known as virtual memory (VM).
Virtual memory is an elegant interaction of hardware exceptions, hardware ad-
dress translation, main memory, disk ﬁles, and kernel software that provides each
process with a large, uniform, and private address space. With one clean mech-
anism, virtual memory provides three important capabilities: (1) It uses main
memory efﬁciently by treating it as a cache for an address space stored on disk,
keeping only the active areas in main memory and transferring data back and
forth between disk and memory as needed. (2) It simpliﬁes memory management
by providing each process with a uniform address space. (3) It protects the address
space of each process from corruption by other processes.
Virtual memory is one of the great ideas in computer systems. A major reason
for its success is that it works silently and automatically, without any intervention
from the application programmer. Since virtual memory works so well behind the
scenes, why would a programmer need to understand it? There are several reasons.
. Virtual memory is central. Virtual memory pervades all levels of computer
systems, playing key roles in the design of hardware exceptions, assemblers,
linkers, loaders, shared objects, ﬁles, and processes. Understanding virtual
memory will help you better understand how systems work in general.
. Virtual memory is powerful. Virtual memory gives applications powerful ca-
pabilities to create and destroy chunks of memory, map chunks of memory to
portions of disk ﬁles, and share memory with other processes. For example,
did you know that you can read or modify the contents of a disk ﬁle by reading
and writing memory locations? Or that you can load the contents of a ﬁle into
memory without doing any explicit copying? Understanding virtual memory
will help you harness its powerful capabilities in your applications.
. Virtual memory is dangerous. Applications interact with virtual memory ev-
ery time they reference a variable, dereference a pointer, or make a call to a
dynamic allocation package such as malloc. If virtual memory is used improp-
erly, applications can suffer from perplexing and insidious memory-related
bugs. For example, a program with a bad pointer can crash immediately with
a “segmentation fault” or a “protection fault,” run silently for hours before
crashing, or scariest of all, run to completion with incorrect results. Under-
standing virtual memory, and the allocation packages such as malloc that
manage it, can help you avoid these errors.
