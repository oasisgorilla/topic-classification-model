432
Chapter 4
Processor Architecture
4.3.2
SEQ Hardware Structure
The computations required to implement all of the Y86-64 instructions can be or-
ganized as a series of six basic stages: fetch, decode, execute, memory, write back,
and PC update. Figure 4.22 shows an abstract view of a hardware structure that can
perform these computations. The program counter is stored in a register, shown
in the lower left-hand corner (labeled “PC”). Information then ﬂows along wires
(shown grouped together as a heavy gray line), ﬁrst upward and then around to
the right. Processing is performed by hardware units associated with the different
stages. The feedback paths coming back down on the right-hand side contain the
updated values to write to the register ﬁle and the updated program counter. In
SEQ, all of the processing by the hardware units occurs within a single clock cycle,
as is discussed in Section 4.3.3. This diagram omits some small blocks of combi-
national logic as well as all of the control logic needed to operate the different
hardware units and to route the appropriate values to the units. We will add this
detail later. Our method of drawing processors with the ﬂow going from bottom
to top is unconventional. We will explain the reason for this convention when we
start designing pipelined processors.
The hardware units are associated with the different processing stages:
Fetch. Using the program counter register as an address, the instruction mem-
ory reads the bytes of an instruction. The PC incrementer computes valP,
the incremented program counter.
Decode. The register ﬁle has two read ports, A and B, via which register values
valA and valB are read simultaneously.
Execute. The execute stage uses the arithmetic/logic (ALU) unit for different
purposes according to the instruction type. For integer operations, it per-
forms the speciﬁed operation. For other instructions, it serves as an adder
to compute an incremented or decremented stack pointer, to compute
an effective address, or simply to pass one of its inputs to its outputs by
adding zero.
The condition code register (CC) holds the three condition code bits.
New values for the condition codes are computed by the ALU. When
executing a conditional move instruction, the decision as to whether or
not to update the destination register is computed based on the condition
codes and move condition. Similarly, when executing a jump instruction,
the branch signal Cnd is computed based on the condition codes and the
jump type.
Memory. The data memory reads or writes a word of memory when executing a
memory instruction. The instruction and data memories access the same
memory locations, but for different purposes.
Write back. The register ﬁle has two write ports. Port E is used to write values
computed by the ALU, while port M is used to write values read from the
data memory.
