106
Chapter 2
Representing and Manipulating Information
4004d0:
48 81 ec e0 02 00 00
sub
$0x2e0,%rsp
A.
4004d7:
48 8b 44 24 a8
mov
-0x58(%rsp),%rax
B.
4004dc:
48 03 47 28
add
0x28(%rdi),%rax
C.
4004e0:
48 89 44 24 d0
mov
%rax,-0x30(%rsp)
D.
4004e5:
48 8b 44 24 78
mov
0x78(%rsp),%rax
E.
4004ea:
48 89 87 88 00 00 00
mov
%rax,0x88(%rdi)
F.
4004f1:
48 8b 84 24 f8 01 00
mov
0x1f8(%rsp),%rax
G.
4004f8:
00
4004f9:
48 03 44 24 08
add
0x8(%rsp),%rax
4004fe:
48 89 84 24 c0 00 00
mov
%rax,0xc0(%rsp)
H.
400505:
00
400506:
48 8b 44 d4 b8
mov
-0x48(%rsp,%rdx,8),%rax
I.
2.2.4
Conversions between Signed and Unsigned
C allows casting between different numeric data types. For example, suppose
variable x is declared as int and u as unsigned. The expression (unsigned) x
converts the value of x to an unsigned value, and (int) u converts the value of u
to a signed integer. What should be the effect of casting signed value to unsigned,
or vice versa? From a mathematical perspective, one can imagine several different
conventions. Clearly, we want to preserve any value that can be represented in
both forms. On the other hand, converting a negative value to unsigned might yield
zero. Converting an unsigned value that is too large to be represented in two’s-
complement form might yield TMax. For most implementations of C, however,
the answer to this question is based on a bit-level perspective, rather than on a
numeric one.
For example, consider the following code:
1
short
int
v
= -12345;
2
unsigned short uv = (unsigned short) v;
3
printf("v = %d, uv = %u\n", v, uv);
When run on a two’s-complement machine, it generates the following output:
v = -12345, uv = 53191
What we see here is that the effect of casting is to keep the bit values identical
but change how these bits are interpreted. We saw in Figure 2.15 that the 16-bit
two’s-complement representation of −12,345 is identical to the 16-bit unsigned
representation of 53,191. Casting from short to unsigned short changed the
numeric value, but not the bit representation.
Similarly, consider the following code:
1
unsigned u = 4294967295u;
/* UMax */
2
int
tu = (int) u;
