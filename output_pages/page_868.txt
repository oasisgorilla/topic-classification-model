Section 9.7
Case Study: The Intel Core i7/Linux Memory System
867
mm
task_struct
pgd
vm_end
vm_start
vm_prot
vm_flags
vm_next
vm_end
vm_start
vm_prot
vm_flags
vm_next
vm_end
Shared libraries
0
Data
Text
vm_start
vm_prot
vm_flags
vm_next
mmap
mm_struct
vm_area_struct
Process virtual memory
Figure 9.27
How Linux organizes virtual memory.
run the process (e.g., the PID, pointer to the user stack, name of the executable
object ﬁle, and program counter).
One of the entries in the task structure points to an mm_struct that charac-
terizes the current state of the virtual memory. The two ﬁelds of interest to us
are pgd, which points to the base of the level 1 table (the page global directory),
and mmap, which points to a list of vm_area_structs (area structs), each of which
characterizes an area of the current virtual address space. When the kernel runs
this process, it stores pgd in the CR3 control register.
For our purposes, the area struct for a particular area contains the following
ﬁelds:
fvm_start. Points to the beginning of the area.
vm_end. Points to the end of the area.
vm_prot. Describes the read/write permissions for all of the pages contained
in the area.
vm_flags. Describes (among other things) whether the pages in the area are
shared with other processes or private to this process.
vm_next. Points to the next area struct in the list.
