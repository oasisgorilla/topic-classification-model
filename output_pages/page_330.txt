Section 3.11
Floating-Point Code
329
In earlier versions of x86 code, the frame pointer was used with every function
call. With x86-64 code, it is used only in cases where the stack frame may be of
variable size, as is the case for function vframe. Historically, most compilers used
frame pointers when generating IA32 code. Recent versions of gcc have dropped
this convention. Observe that it is acceptable to mix code that uses frame pointers
with code that does not, as long as all functions treat %rbp as a callee-saved register.
Practice Problem 3.49 (solution page 383)
In this problem, we will explore the logic behind the code in lines 5–11 of Fig-
ure 3.43(b), where space is allocated for variable-size array p. As the annotations
of the code indicate, let us let s1 denote the address of the stack pointer after exe-
cuting the subq instruction of line 4. This instruction allocates the space for local
variable i. Let s2 denote the value of the stack pointer after executing the subq
instruction of line 7. This instruction allocates the storage for local array p. Finally,
let p denote the value assigned to registers %r8 and %rcx in the instructions of lines
10–11. Both of these registers are used to reference array p.
The right-hand side of Figure 3.44 diagrams the positions of the locations
indicated by s1, s2, and p. It also shows that there may be an offset of e2 bytes
between the values of s1 and p. This space will not be used. There may also be an
offset of e1 bytes between the end of array p and the position indicated by s1.
A. Explain, in mathematical terms, the logic in the computation of s2 on lines
5–7. Hint: Think about the bit-level representation of −16 and its effect in
the andq instruction of line 6.
B. Explain, in mathematical terms, the logic in the computation of p on lines
8–10. Hint: You may want to refer to the discussion on division by powers
of 2 in Section 2.3.7.
C. For the following values of n and s1, trace the execution of the code to
determine what the resulting values would be for s2, p, e1, and e2.
n
s1
s2
p
e1
e2
5
2,065
6
2,064
D. What alignment properties does this code guarantee for the values of s2
and p?
3.11
Floating-Point Code
The ﬂoating-point architecture for a processor consists of the different aspects
that affect how programs operating on ﬂoating-point data are mapped onto the
machine, including
. How ﬂoating-point values are stored and accessed. This is typically via some
form of registers.
