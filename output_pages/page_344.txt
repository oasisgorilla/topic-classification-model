Section 3.11
Floating-Point Code
343
(a) C code
typedef enum {NEG, ZERO, POS, OTHER} range_t;
range_t find_range(float x)
{
int result;
if (x < 0)
result = NEG;
else if (x == 0)
result = ZERO;
else if (x > 0)
result = POS;
else
result = OTHER;
return result;
}
(b) Generated assembly code
range_t find_range(float x)
x in %xmm0
1
find_range:
2
vxorps
%xmm1, %xmm1, %xmm1
Set %xmm1 = 0
3
vucomiss
%xmm0, %xmm1
Compare 0:x
4
ja
.L5
If >, goto neg
5
vucomiss
%xmm1, %xmm0
Compare x:0
6
jp
.L8
If NaN, goto posornan
7
movl
$1, %eax
result = ZERO
8
je
.L3
If =, goto done
9
.L8:
posornan:
10
vucomiss
.LC0(%rip), %xmm0
Compare x:0
11
setbe
%al
Set result = NaN ? 1 : 0
12
movzbl
%al, %eax
Zero-extend
13
addl
$2, %eax
result += 2 (POS for > 0, OTHER for NaN)
14
ret
Return
15
.L5:
neg:
16
movl
$0, %eax
result = NEG
17
.L3:
done:
18
rep; ret
Return
Figure 3.51
Illustration of conditional branching in ï¬‚oating-point code.
