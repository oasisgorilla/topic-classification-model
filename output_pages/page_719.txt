718
Chapter 7
Linking
At run time, function f changes the value of x from 15213 to 15212, which
might come as an unwelcome surprise to the author of function main! Notice that
the linker normally gives no indication that it has detected multiple deﬁnitions
of x:
linux> gcc -o foobar3 foo3.c bar3.c
linux> ./foobar3
x = 15212
The same thing can happen if there are two weak deﬁnitions of x (rule 3):
1
/* foo4.c */
2
#include <stdio.h>
3
void f(void);
4
5
int x;
6
7
int main()
8
{
9
x = 15213;
10
f();
11
printf("x = %d\n", x);
12
return 0;
13
}
1
/* bar4.c */
2
int x;
3
4
void f()
5
{
6
x = 15212;
7
}
The application of rules 2 and 3 can introduce some insidious run-time bugs
that are incomprehensible to the unwary programmer, especially if the duplicate
symbol deﬁnitions have different types. Consider the following example, in which
x is inadvertently deﬁned as an int in one module and a double in another:
1
/* foo5.c */
2
#include <stdio.h>
3
void f(void);
4
5
int y = 15212;
6
int x = 15213;
7
8
int main()
9
{
10
f();
