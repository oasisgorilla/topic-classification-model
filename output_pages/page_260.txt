Section 3.6
Control
259
short dw_loop(short x)
x initially in %rdi
1
dw_loop:
2
movq
%rdi, %rbx
3
movq
%rdi, %rcx
4
idivq
$9, %rcx
5
leaq
(,%rdi,4), %rdx
6
.L2:
7
leaq
5(%rbx,%rcx), %rcx
8
subq
$1, %rdx
9
testq
%rdx, %rdx
10
jg
.L2
11
rep; ret
A. Which registers are used to hold program values x, y, and n?
B. How has the compiler eliminated the need for pointer variable p and the
pointer dereferencing implied by the expression (*p)+=5?
C. Add annotations to the assembly code describing the operation of the pro-
gram, similar to those shown in Figure 3.19(c).
While Loops
The general form of a while statement is as follows:
while (test-expr)
body-statement
It differs from do-while in that test-expr is evaluated and the loop is potentially
terminated before the ﬁrst execution of body-statement. There are a number of
ways to translate a while loop into machine code, two of which are used in code
generated by gcc. Both use the same loop structure as we saw for do-while loops
but differ in how to implement the initial test.
The ﬁrst translation method, which we refer to as jump to middle, performs
the initial test by performing an unconditional jump to the test at the end of the
loop. It can be expressed by the following template for translating from the general
while loop form to goto code:
goto test;
loop:
body-statement
test:
t = test-expr;
if (t)
goto loop;
As an example, Figure 3.20(a) shows an implementation of the factorial func-
tion using a while loop. This function correctly computes 0! = 1. The adjacent
