Section 7.13
Library Interpositioning
743
these entries is responsible for invoking a speciﬁc function. PLT[1] (not
shown here) invokes the system startup function (__libc_start_main),
which initializes the execution environment, calls the main function, and
handles its return value. Entries starting at PLT[2] invoke functions called
by the user code. In our example, PLT[2] invokes addvec and PLT[3] (not
shown) invokes printf.
Global offset table (GOT). As we have seen, the GOT is an array of 8-byte
address entries. When used in conjunction with the PLT, GOT[0] and
GOT[1] contain information that the dynamic linker uses when it resolves
function addresses. GOT[2] is the entry point for the dynamic linker in
the ld-linux.so module. Each of the remaining entries corresponds to
a called function whose address needs to be resolved at run time. Each
has a matching PLT entry. For example, GOT[4] and PLT[2] correspond
to addvec. Initially, each GOT entry points to the second instruction in
the corresponding PLT entry.
Figure 7.19(a) shows how the GOT and PLT work together to lazily resolve
the run-time address of function addvec the ﬁrst time it is called:
Step 1. Instead of directly calling addvec, the program calls into PLT[2], which
is the PLT entry for addvec.
Step 2. The ﬁrst PLT instruction does an indirect jump through GOT[4]. Since
each GOT entry initially points to the second instruction in its correspond-
ing PLT entry, the indirect jump simply transfers control back to the next
instruction in PLT[2].
Step 3. After pushing an ID for addvec (0x1) onto the stack, PLT[2] jumps to
PLT[0].
Step 4. PLT[0] pushes an argument for the dynamic linker indirectly through
GOT[1] and then jumps into the dynamic linker indirectly through GOT[2].
The dynamic linker uses the two stack entries to determine the run-
time location of addvec, overwrites GOT[4] with this address, and passes
control to addvec.
Figure 7.19(b) shows the control ﬂow for any subsequent invocations of
addvec:
Step 1. Control passes to PLT[2] as before.
Step 2. However, this time the indirect jump through GOT[4] transfers control
directly to addvec.
7.13
Library Interpositioning
Linux linkers support a powerful technique, called library interpositioning, that
allows you to intercept calls to shared library functions and execute your own code
instead. Using interpositioning, you could trace the number of times a particular
