Section 8.4
Process Control
779
Practice Problem 8.2 (solution page 831)
Consider the following program:
code/ecf/global-forkprob0.c
1
int main()
2
{
3
int a = 9;
4
5
if (Fork() == 0)
6
printf("p1: a=%d\n", a--);
7
printf("p2: a=%d\n", a++);
8
exit(0);
9
}
code/ecf/global-forkprob0.c
A. What is the output of the child process?
B. What is the output of the parent process?
8.4.3
Reaping Child Processes
When a process terminates for any reason, the kernel does not remove it from
the system immediately. Instead, the process is kept around in a terminated state
until it is reaped by its parent. When the parent reaps the terminated child, the
kernel passes the child’s exit status to the parent and then discards the terminated
process, at which point it ceases to exist. A terminated process that has not yet
been reaped is called a zombie.
When a parent process terminates, the kernel arranges for the init process
to become the adopted parent of any orphaned children. The init process, which
has a PID of 1, is created by the kernel during system start-up, never terminates,
and is the ancestor of every process. If a parent process terminates without reaping
its zombie children, then the kernel arranges for the init process to reap them.
However, long-running programs such as shells or servers should always reap their
zombie children. Even though zombies are not running, they still consume system
memory resources.
A process waits for its children to terminate or stop by calling the waitpid
function.
#include <sys/types.h>
#include <sys/wait.h>
pid_t waitpid(pid_t pid, int *statusp, int options);
Returns: PID of child if OK, 0 (if WNOHANG), or −1 on error
