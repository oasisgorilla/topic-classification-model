496
Chapter 4
Processor Architecture
Pipeline register
Condition
F
D
E
M
W
Processing ret
stall
bubble
normal
normal
normal
Load/use hazard
stall
stall
bubble
normal
normal
Mispredicted branch
normal
bubble
bubble
normal
normal
Figure 4.66
Actions for pipeline control logic. The different conditions require altering
the pipeline ﬂow by either stalling the pipeline or canceling partially executed instructions.
in Section 4.2.5. Suppose that each pipeline register has two control inputs stall
and bubble. The settings of these signals determine how the pipeline register is
updated as the clock rises. Under normal operation (Figure 4.65(a)), both of these
inputs are set to 0, causing the register to load its input as its new state. When the
stall signal is set to 1 (Figure 4.65(b)), the updating of the state is disabled. Instead,
the register will remain in its previous state. This makes it possible to hold back
an instruction in some pipeline stage. When the bubble signal is set to 1 (Figure
4.65(c)), the state of the register will be set to some ﬁxed reset conﬁguration, giving
a state equivalent to that of a nop instruction. The particular pattern of ones and
zeros for a pipeline register’s reset conﬁguration depends on the set of ﬁelds in
the pipeline register. For example, to inject a bubble into pipeline register D, we
want the icode ﬁeld to be set to the constant value INOP (Figure 4.26). To inject
a bubble into pipeline register E, we want the icode ﬁeld to be set to INOP and
the dstE, dstM, srcA, and srcB ﬁelds to be set to the constant RNONE. Determining
the reset conﬁguration is one of the tasks for the hardware designer in designing
a pipeline register. We will not concern ourselves with the details here. We will
consider it an error to set both the bubble and the stall signals to 1.
The table in Figure 4.66 shows the actions the different pipeline stages should
take for each of the three special conditions. Each involves some combination of
normal, stall, and bubble operations for the pipeline registers. In terms of timing,
the stall and bubble control signals for the pipeline registers are generated by
blocks of combinational logic. These values must be valid as the clock rises, causing
each of the pipeline registers to either load, stall, or bubble as the next clock cycle
begins. With this small extension to the pipeline register designs, we can implement
a complete pipeline, including all of its control, using the basic building blocks of
combinational logic, clocked registers, and random access memories.
Combinations of Control Conditions
In our discussion of the special pipeline control conditions so far, we assumed that
at most one special case could arise during any single clock cycle. A common bug in
designing a system is to fail to handle instances where multiple special conditions
arise simultaneously. Let us analyze such possibilities. We need not worry about
combinations involving program exceptions, since we have carefully designed
our exception-handling mechanism to consider other instructions in the pipeline.
Figure 4.67 diagrams the pipeline states that cause the other three special control
