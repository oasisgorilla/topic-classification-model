33
CHAPTER  05    프로그램 디자인
미치지 않는다. 반대로 넘겨지는 모든 오브젝트는 읽고 쓸 수 있다. 레퍼런스는 값
으로, 즉 오브젝트 자체는 레퍼런스로 전달된다. 피호출자는 오브젝트에 원하는 모
든 동작을 수행할 수 있다. 메소드에서 넘겨진 파라미터의 각 필드를 수정하는지 
여부를 절대 문서화하지 말자. 메소드에서 각 필드를 수정하는 경우에는 메소드 이
름을 마치 보기만 할 것처럼 보이는 이름으로 위장해야 한다.
전역 변수의 마술
예외를 이용해 예외를 처리하는 것보다는 자신만의 에러 메시지 루틴 집합을 전역 
변수로 갖는 것이 좋다. 시스템에서 오랫동안 수행되는 모든 루프에다 전역 플래그
를 검사하고 문제가 발생하면 종료하도록 코드를 추가하자. 사용자가 reset 버튼을 
눌렀을 때 이를 알릴 수 있는 또 다른 전역 변수도 추가한다. 마찬가지로 시스템의 
모든 루프에 이 두 번째 전역 변수를 확인하는 코드를 넣어야 한다. 이때 요청 시에
도 종료하지 않는 루프 몇 개를 숨겨두는 것을 잊지 말자.
아무리 강조해도 지나치지 않을 그대 이름은 전역!
우리가 전역 변수를 사용하는 것을 원치 않았다면 신은 전역 변수라는 것을 창조하
지 않았을 것이다. 따라서 가능한 전역 변수를 많이 사용하여 신을 실망시키지 말
아야 한다. 특별한 이유가 없더라도 각 함수에서는 최소한 두 개 이상의 전역 변수
를 사용해야 한다. 좋은 유지보수 프로그래머라면 이것이 일종의 검출 연습이라는 
사실을 금방 깨닫게 될 것이다. 그리고 진심을 다하는 유지보수 프로그래머와 취미
로 하는 유지보수 프로그래머를 구별해주는 이 테스트를 즐길 것이다. 
여러분! 전역 변수에 대해 한 번 더 살펴봅시다
전역 변수를 사용하면 함수에서 매개 변수를 지정하는 일을 생략할 수 있다. 이를 
적극 활용하자. 전역 변수 중 몇 개를 선택해서 어떤 프로세스가 작업을 수행할지 
지정하자. 유지보수 프로그래머는 바보처럼 C 함수에서 부작용이 발생하진 않을 것
이라 생각할 수 있다. 이들에게 깜짝 놀랄 결과를 보여주자. 물론 내부 상태 정보는 
