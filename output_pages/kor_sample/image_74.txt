60
CHAPTER  11    잡다한 기법
레이드해야 한다. 결국 오래된 버전을 원하는 사람은 아무도 없기 때문이다. 프로
그램 자체로도 그렇게 좋아한다면, 문제를 “수정”한 버전을 내놓았을 때에는 얼마
나 기뻐할지 생각해보라! 누군가가 묻지 않는 한 절대 버전 변경의 차이를 말하지 
마라. 알려주지 않았으면 알아차리지도 못했을 예전 버그를 왜 알려줘야 하는가? 
프로그램 정보 
프로그램 정보란에는 프로그램 이름, 코더 이름, 난해한 법률용어를 포함하는 저작
권 등을 포함한다. 이 화면에서 재미있는 애니메이션을 보여주는 코드를 실행하는 
링크가 있다면 금상첨화다. 그러나 프로그램 정보란에 프로그램의 목적, 마이너 버 
전, 최신 코드 리비전 날짜, 업데이트를 얻을 수 있는 웹사이트, 저자의 이메일 주
소 등은 절대 명시하지 말아야 한다. 이렇게 시간이 흐르면 많은 이들이 각자 서로 
다른 버전을 사용하게 할 수 있다. 때로는 N+1 버전을 설치하지도 않고 N+2 버전
을 설치하려는 이도 있을 것이다. 
변화, 변화, 변화하라 
버전마다 더 많은 변화를 줄수록 좋다. 예전 API나 오래된 사용자 인터페이스를 사
용하면서 지루해지기를 원하는 사람은 아무도 없다. 그러나 사용자가 알지 못하는 
변경을 하는 것도 나쁘진 않다. 결국 이 모든 변화는 사용자를 긴장 시키고, 현실에 
안주하지 않게 채찍질 할 것이다. 
개별 파일에 C 프로토타입을 추가하라 
공통 헤더를 사용하지 않고 개별 파일에 C 프로토타입을 추가하므로 파라미터 데
이터 형식을 모든 파일에서 유지하게 하고 컴파일러나 링크가 형식 불일치를 검출
하지 못하게 하는 일석이조 효과를 얻을 수 있다. 이는 32비트에서 64비트 플랫폼
으로 포팅할 때 특히 유용하다. 
특별한 기술은 필요 없다 
큰 기술이 있어야 유지보수할 수 없는 코드를 작성할 수 있는 것은 아니다. 그냥 
This eBook is licensed to 남궁진(jinvicky@naver.com). Personal use only
