27
CHAPTER  05    프로그램 디자인
가 어떤 작업을 수행하는지 알아내기 어렵게 할 수 있고 아주 다양한 종류의 형변
환이라는 즐거움을 만끽할 수 있다. 이를 좀 더 활용해서 각 팀 멤버에게 자신만의 
개인 인터페이스(예를 들어, Writ-tenByJoe)를 만들어줄 수 있다. 그리고 각자가 
작업한 클래스는 자신만의 인터페이스를 구현하게 한다. 자 이제, 의미 없는 수많
은 인터페이스 중에 아무 인터페이스를 골라잡아 오브젝트 참조에 사용할 수 있다. 
거대 리스너 
각 컴포넌트에 리스너를 개별적으로 만들지 않는다. 우리 프로젝트의 모든 버튼의 
이벤트를 처리할 리스너를 단 한 개로 통일하고 수많은 if…else 문으로 각 버튼 동
작을 처리하는 것이 바람직하다. 
좋은 것은 남용하라 
캡슐화와 oo를 남용하라. 다음 코드를 살펴보자. 
myPanel.add( getMyButton() ); 
private JButton getMyButton() 
	
{ 
	
return myButton; 
	
} 
위 코드에 특별히 흥미로운 부분은 없어 보인다. 걱정할 필요 없다. 언젠가는 재미
있는 일이 일어날 것이다. 
우호적인 친구
C++에서는 가능한 한 자주 friend-선언을 사용한다. 생성된 클래스의 클래스 생
성 포인터 처리와 결합하는 것도 좋은 방법이다. 그럼 인터페이스를 생각하는데 시
간을 낭비할 필요성이 없어진다. 또한 private와 protected 키워드를 사용해 클래
스를 캡슐화할 수 있다.
