30
CHAPTER  05    프로그램 디자인
치환으로 당황시키기
drawRectangle(height, width)라는 메소드가 있다면 다른 부분은 건드리지 말
고 파라미터 순서만 drawRectangle(width, height)처럼 역순으로 바꿔보자. 그
리고 몇 번의 릴리즈가 일어난 다음에 원상 복귀시킨다. 유지보수 프로그래머는 그
런 변경이 일어났는지 쉽게 구별하기가 어려울 것이다. 일반화 문제는 독자 여러분
에게 숙제로 남겨둔다.
테마와 변형
하나의 메소드에 파라미터를 사용하기보다는 되도록이면 여러 메소드를 만드
는 것이 좋다. 예를 들어, 왼쪽, 오른쪽, 가운데 정렬을 의미하는 상수를 파라미터
로 넘겨줄 수 있는 setAlignment(int alignment)보다는 setLeftAlignment, 
setRightAlignment, setCenterAlignment와 같이 세 개의 메소드를 정의하는 것
이 바람직하다. 마찬가지로 공통 로직을 복제해서 동기화를 어렵게 만들면 효과가 
커진다.
static이 좋다
가능하다면 변수를 static으로 만들자. 우리 프로그램에서 클래스 인스턴스가 한 
개 이상 필요하지 않으면 다른 이들도 마찬가지일 것이다. 프로젝트의 다른 코더가 
이에 대해 불평한다면 이 방법 덕분에 실행속도가 빨라졌음을 알려주자.
카길사의 진태양난
카길사의 진퇴양난을 이용하자. “적절한 수준의 부정 수단을 이용한다면 모든 디
자인 문제를 해결할 수 있다”. 프로그램상태를 갱신하는 메소드를 찾을 수 없을 때
까지 OO 프로그램을 분해하자. 모든 결과물을 전체 시스템 내에서 사용하는 모든 
함수 포인터를 포함하는 포인터 포레스트를 탐색한 결과에 대한 콜백으로 활성화 
할 수 있게 정렬하면 더욱 좋다. 포레스트 탐색 정렬을 활성화하면 깊은 복사(실제
로는 그렇게 깊지 않지만)를 통해 만들어진 오브젝트 레퍼런스를 해제하는 과정에서 
This eBook is licensed to 남궁진(jinvicky@naver.com). Personal use only
