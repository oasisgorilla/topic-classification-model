45
CHAPTER  06    코드 혼잡화
혼란을 안겨주는 import 
패키지에서 우리가 어떤 메소드를 사용하는 것인지 유지보수 프로그래머에게 직접 
알려주지 말고 추측하게 할 수 있다. 즉 아래와 같이 명시하지 말고, 
import MyPackage.Read; 
import MyPackage.Write; 
이렇게 사용한다. 
import Mypackage. *; 
절대, 클래스나 메소드에 패키지명을 포함한 전체 이름을 사용하지 않는다. 유지보
수 프로그래머가 우리 코드를 보면서 각각 어떤 패키지/클래스에 속한 것인지 추
측하게 만들자. 물론 경우에 따라 전체 패키지 이름을 사용하거나 import 구문 사
용방식을 바꾸어 주면 더욱 효과적이다. 
변기 배관 
어떤 경우에도 함수나 프로시저가 한 화면에 모두 보이도록 하지 말아야 한다. 간
단한 루틴에는 아래 설명하는 기법을 사용하자. 
일반적으로 코드의 논리적인 블록을 구분하는 데 빈 줄을 사용한다. 우리 코드의 
모든 라인은 각각이 논리적인 블록이다. 따라서 모든 줄에 빈 줄을 추가한다. 
주석을 코드 끝에 추가하지 말고 윗부분에 추가하라. 어쩔 수 없는 강요에 의해 코
드의 뒷부분에 추가해야만 하는 상황이라면 전체 파일에서 가장 긴 줄을 찾아 10
개의 공백을 넣고 모든 end-of-line 주석을 왼쪽 정렬한다.
프로시저 윗부분의 주석에 사용할 템플릿은 적어도 15줄 이상이어야하고 빈줄도 
자유롭게 추가한다. 아래는 간단한 예제 템플릿이다.
