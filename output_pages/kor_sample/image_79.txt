65
CHAPTER  11    잡다한 기법
버그를 보상하라
코드에서 버그의 근본 원인을 찾아내는 것을 두려워하지 말고 고수준 루틴에 이를 
보상할 수 있는 코드를 넣자. 이는 3D 체스와 같은 지능 활동의 산물이다. 이 덕분
에 이후에 작업할 유지보수 프로그래머는 문제가 데이터를 생성하는 저수준 루틴
에서 발생한 것인지 아니면 값을 변경하는 고수준 루틴에서 발생한 것인지를 찾는 
즐거움에 빠져 수많은 시간을 보내야 할 것이다. 이 기법은 멀티 패스 프로그램인 
컴파일러에 적합하다. 첫 번째 과정에서는 문제 수정을 회피함으로써 나중 과정을 
더욱 복잡하게 만들 수 있다. 운이 좋으면 컴파일러의 프론트엔드 유지보수를 담당
자에게 이 부분에 대해 얘기할 필요가 없는 경우도 있다. 프론트엔드에서 데이터를 
정확하게 만든 경우 백엔드가 멈추면 더욱 좋다.
스핀 락(Spin Lock)을 활용하라
스핀 락을 사용하고 기본 동기화 기능을 사용하지 말아라. 반복적으로 슬립 상태에 
빠지면서 전역 변수(비휘발성의)를 통해 조건을 만족하는지 확인하자. 스핀 락은 
시스템 오브젝트보다 더 “일반적”이고 “유연”하며 사용하기 쉽다.
동기화 코드를 마구 뿌려대라
꼭 필요하지 않은 곳이라 하더라도 시스템 동기화 코드를 추가해보자. 필자는 코드
에서 두 번째 스레드가 실행할 가능성이 전혀 없는 크리티컬 섹션을 우연히 발견했
다. 기존 개발자를 대상으로 한 번 시험해봤고, 그는 해당 코드가 “비난받기critical!” 
마땅하다고 시인했다.
우아한 타락
시스템에 NT 디바이스 드라이버를 사용한다면, 응용프로그램에서 I/O에 필요한 
버퍼를 요구하고 트랜잭션이 일어나는 동안 버퍼에 락을 걸도록 요청하자. 그리고 
나중에 버퍼를 언락하고 해제한다. 응용프로그램이 버퍼에 락을 건 상태로 비정상
적으로 종료하면 NT 자체의 크래쉬를 발생시킬 수 있다. 클라이언트 사이트에서는 
