28
CHAPTER  05    프로그램 디자인
삼차원 배열을 사용하라
삼차원 배열을 적극 사용하자. arrayA의 행 데이터를 arrayB의 열에 채우기와 같
이 배열 간에 데이터를 이동할 때는 복잡한 방법을 사용할수록 좋다. 특별한 이유 
없이 오프셋을 0이 아닌 1로 사용한다면 유지보수 프로그래머를 불안하게 만들 수 
있다.
혼합과 매치
가능하면 accessor 메소드와 public 변수를 함께 사용한다. 이 방식을 사용하면 
accessor를 호출하지 않고도 오브젝트 변수를 변경할 수 있다. 그러나 여전히 우
리 클래스는 “자바 빈”이라고 말할 수 있다. 이 방법은 누가 변수 값을 변경하는지 
알아내려고 로깅 기능을 추가한 유지보수 프로그래머를 좌절시킬 수 있다는 장점
도 제공한다.
감싸고, 감싸고, 감싸라
우리가 구현하지 않은 코드를 우리 메소드에 사용해야 할 때에는 다른 더러운 코드
에 우리 코드가 오염되지 않도록 적어도 한 번 이상 래퍼 레이어를 사용해야 한다. 
어쩌면 다른 부분을 작성한 프로그래머도 언젠가 모든 메소드의 이름을 자기 마음
대로 바꾸어 버릴지 모를 일이다. 그럼 우리는 어떻게 대처해야 할까? 이러한 경우 
래퍼를 만들어 우리 코드를 보호하거나 VAJ로 전체적인 이름 변경을 처리할 수 있
다. 한편 이는 간접적으로 래퍼 레이어를 통해 어떤 멍청한 일을 저지르기 전에 그
를 제거할 구실을 제공하는 기회로 삼을 수 있다. 자바의 주요 문제점 가운데 하나
는 별다른 작업을 수행하지 않고 다른 메소드의 같은 이름 또는 밀접히 연관된 이
름을 호출하는 더미 래퍼 메소드 없이는 간단한 문제도 해결하기 힘들다는 점이다. 
즉, 우리는 아무 작업도 하지 않는 4단계의 래퍼를 쥐도 새도 모르게 만들 수 있다. 
소스코드 혼잡성을 극대화하려면 각 단계에서 메소드 이름을 변경하고, 랜덤으로 
유의어 사전에서 동의어를 선택할 수 있다. 이와 같은 방법을 이용해 마치 뭔가가 일
어나고 있다는 환상을 심어줄 수 있다. 나중에 이름을 변경하면서 프로젝트 용어의 
This eBook is licensed to 남궁진(jinvicky@naver.com). Personal use only
