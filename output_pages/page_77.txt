76
Chapter 2
Representing and Manipulating Information
Most 64-bit machines can also run programs compiled for use on 32-bit ma-
chines, a form of backward compatibility. So, for example, when a program prog.c
is compiled with the directive
linux> gcc -m32 prog.c
then this program will run correctly on either a 32-bit or a 64-bit machine. On the
other hand, a program compiled with the directive
linux> gcc -m64 prog.c
will only run on a 64-bit machine. We will therefore refer to programs as being
either “32-bit programs” or “64-bit programs,” since the distinction lies in how a
program is compiled, rather than the type of machine on which it runs.
Computers and compilers support multiple data formats using different ways
to encode data, such as integers and ﬂoating point, as well as different lengths.
For example, many machines have instructions for manipulating single bytes, as
well as integers represented as 2-, 4-, and 8-byte quantities. They also support
ﬂoating-point numbers represented as 4- and 8-byte quantities.
The C language supports multiple data formats for both integer and ﬂoating-
point data. Figure 2.3 shows the number of bytes typically allocated for different C
data types. (We discuss the relation between what is guaranteed by the C standard
versus what is typical in Section 2.2.) The exact numbers of bytes for some data
types depends on how the program is compiled. We show sizes for typical 32-bit
and 64-bit programs. Integer data can be either signed, able to represent negative,
zero, and positive values, or unsigned, only allowing nonnegative values. Data
type char represents a single byte. Although the name char derives from the fact
that it is used to store a single character in a text string, it can also be used to store
integer values. Data types short, int, and long are intended to provide a range of
C declaration
Bytes
Signed
Unsigned
32-bit
64-bit
[signed] char
unsigned char
1
1
short
unsigned short
2
2
int
unsigned
4
4
long
unsigned long
4
8
int32_t
uint32_t
4
4
int64_t
uint64_t
8
8
char *
4
8
float
4
4
double
8
8
Figure 2.3
Typical sizes (in bytes) of basic C data types. The number of bytes allocated
varies with how the program is compiled. This chart shows the values typical of 32-bit
and 64-bit programs.
