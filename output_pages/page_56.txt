Section 1.8
Systems Communicate with Other Systems Using Networks
55
running, the heap expands and contracts dynamically at run time as a result
of calls to C standard library routines such as malloc and free. We will study
heaps in detail when we learn about managing virtual memory in Chapter 9.
. Shared libraries.Near the middle of the address space is an area that holds the
code and data for shared libraries such as the C standard library and the math
library. The notion of a shared library is a powerful but somewhat difﬁcult
concept. You will learn how they work when we study dynamic linking in
Chapter 7.
. Stack. At the top of the user’s virtual address space is the user stack that
the compiler uses to implement function calls. Like the heap, the user stack
expands and contracts dynamically during the execution of the program. In
particular, each time we call a function, the stack grows. Each time we return
from a function, it contracts. You will learn how the compiler uses the stack
in Chapter 3.
. Kernel virtual memory.The top region of the address space is reserved for the
kernel. Application programs are not allowed to read or write the contents of
this area or to directly call functions deﬁned in the kernel code. Instead, they
must invoke the kernel to perform these operations.
For virtual memory to work, a sophisticated interaction is required between
the hardware and the operating system software, including a hardware translation
of every address generated by the processor. The basic idea is to store the contents
of a process’s virtual memory on disk and then use the main memory as a cache
for the disk. Chapter 9 explains how this works and why it is so important to the
operation of modern systems.
1.7.4
Files
A ﬁle is a sequence of bytes, nothing more and nothing less. Every I/O device,
including disks, keyboards, displays, and even networks, is modeled as a ﬁle. All
input and output in the system is performed by reading and writing ﬁles, using a
small set of system calls known as Unix I/O.
This simple and elegant notion of a ﬁle is nonetheless very powerful because
it provides applications with a uniform view of all the varied I/O devices that
might be contained in the system. For example, application programmers who
manipulate the contents of a disk ﬁle are blissfully unaware of the speciﬁc disk
technology. Further, the same program will run on different systems that use
different disk technologies. You will learn about Unix I/O in Chapter 10.
1.8
Systems Communicate with Other Systems
Using Networks
Up to this point in our tour of systems, we have treated a system as an isolated
collection of hardware and software. In practice, modern systems are often linked
to other systems by networks. From the point of view of an individual system, the
