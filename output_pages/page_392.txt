Section 4.1
The Y86-64 Instruction Set Architecture
391
logic into Verilog. By ﬁrst debugging the HCL description with our simulators, we
eliminate many of the tricky bugs that would otherwise show up in the hardware
design. Given a Verilog description, there are commercial and open-source tools
to support simulation and logic synthesis, generating actual circuit designs for the
microprocessors. So, although much of the effort we expend here is to create picto-
rial and textual descriptions of a system, much as one would when writing software,
the fact that these designs can be automatically synthesized demonstrates that we
are indeed creating a system that can be realized as hardware.
4.1
The Y86-64 Instruction Set Architecture
Deﬁning an instruction set architecture, such as Y86-64, includes deﬁning the
different components of its state, the set of instructions and their encodings, a
set of programming conventions, and the handling of exceptional events.
4.1.1
Programmer-Visible State
As Figure 4.1 illustrates, each instruction in a Y86-64 program can read and modify
some part of the processor state. This is referred to as the programmer-visible
state, where the “programmer” in this case is either someone writing programs
in assembly code or a compiler generating machine-level code. We will see in our
processor implementations that we do not need to represent and organize this
state in exactly the manner implied by the ISA, as long as we can make sure that
machine-level programs appear to have access to the programmer-visible state.
The state for Y86-64 is similar to that for x86-64. There are 15 program registers:
%rax, %rcx, %rdx, %rbx, %rsp, %rbp, %rsi, %rdi, and %r8 through %r14. (We omit
the x86-64 register %r15 to simplify the instruction encoding.) Each of these stores
a 64-bit word. Register %rsp is used as a stack pointer by the push, pop, call, and
return instructions. Otherwise, the registers have no ﬁxed meanings or values.
There are three single-bit condition codes, ZF, SF, and OF, storing information
Figure 4.1
Y86-64 programmer-
visible state. As with
x86-64, programs for Y86-
64 access and modify
the program registers,
the condition codes, the
program counter (PC), and
the memory. The status
code indicates whether
the program is running
normally or some special
event has occurred.
RF: Program registers
Stat: Program status
DMEM: Memory
CC:
Condition
codes
%rax
%rcx
%rdx
%rbx
%rsp
%rbp
%rsi
%rdi
%r8
%r9
%r10
%r11
%r12
%r13
%r14
PC
ZF SF OF
