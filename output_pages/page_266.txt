Section 3.6
Control
265
The C language standard states (with one exception, highlighted in Problem 3.29)
that the behavior of such a loop is identical to the following code using a while
loop:
init-expr;
while (test-expr) {
body-statement
update-expr;
}
The program ﬁrst evaluates the initialization expression init-expr. It enters a
loop where it ﬁrst evaluates the test condition test-expr, exiting if the test fails, then
executes the body of the loop body-statement, and ﬁnally evaluates the update
expression update-expr.
The code generated by gcc for a for loop then follows one of our two trans-
lation strategies for while loops, depending on the optimization level. That is, the
jump-to-middle strategy yields the goto code
init-expr;
goto test;
loop:
body-statement
update-expr;
test:
t = test-expr;
if (t)
goto loop;
while the guarded-do strategy yields
init-expr;
t = test-expr;
if (!t)
goto done;
loop:
body-statement
update-expr;
t = test-expr;
if (t)
goto loop;
done:
As examples, consider a factorial function written with a for loop:
long fact_for(long n)
{
long i;
long result = 1;
