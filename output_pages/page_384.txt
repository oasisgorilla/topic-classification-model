Solutions to Practice Problems
383
E. The call to malloc should have had strlen(buf)+1 as its argument, and the
code should also check that the returned value is not equal to NULL.
Solution to Problem 3.47 (page 322)
A. This corresponds to a range of around 213 addresses.
B. A 128-byte nop sled would cover 27 addresses with each test, and so we would
only require around 26 = 64 attempts.
This example clearly shows that the degree of randomization in this version
of Linux would provide only minimal deterrence against an overﬂow attack.
Solution to Problem 3.48 (page 324)
This problem gives you another chance to see how x86-64 code manages the stack,
and to also better understand how to defend against buffer overﬂow attacks.
A. For the unprotected code, we can see that lines 4 and 5 compute the positions
of v and buf to be at offsets 24 and 0 relative to %rsp. In the protected code,
the canary is stored at offset 40 (line 4), while v and buf are at offsets 8 and
16 (lines 7 and 8).
B. In the protected code, local variable v is positioned closer to the top of the
stack than buf, and so an overrun of buf will not corrupt the value of v.
Solution to Problem 3.49 (page 329)
This code combines many of the tricks we have seen for performing bit-level
arithmetic. It requires careful study to make any sense of it.
A. The leaq instruction of line 5 computes the value 8n + 22, which is then
rounded down to the nearest multiple of 16 by the andq instruction of line 6.
The resulting value will be 8n + 8 when n is odd and 8n + 16 when n is even,
and this value is subtracted from s1 to give s2.
B. The three instructions in this sequence round s2 up to the nearest multiple
of 8. They make use of the combination of biasing and shifting that we saw
for dividing by a power of 2 in Section 2.3.7.
C. These two examples can be seen as the cases that minimize and maximize
the values of e1 and e2.
n
s1
s2
p
e1
e2
5
2,065
2,017
2,024
1
7
6
2,064
2,000
2,000
16
0
D. We can see that s2 is computed in a way that preserves whatever offset s1 has
with the nearest multiple of 16. We can also see that p will be aligned on a
multiple of 8, as is recommended for an array of 8-byte elements.
Solution to Problem 3.50 (page 336)
This exercise requires that you step through the code, paying careful attention to
which conversion and data movement instructions are used. We can see the values
being retrieved and converted as follows:
