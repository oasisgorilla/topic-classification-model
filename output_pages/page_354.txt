Homework Problems
353
8
addq
%rdi, %rdx
9
movq
A(,%rdx,8), %rax
10
movq
%rax, (%rcx)
11
movl
$3640, %eax
12
ret
A. Extend Equation 3.1 from two dimensions to three to provide a formula for
the location of array element A[i][j][k].
B. Use your reverse engineering skills to determine the values of R, S, and T
based on the assembly code.
3.65 ◆
The following code transposes the elements of an M × M array, where M is a
constant deﬁned by #define:
1
void transpose(long A[M][M]) {
2
long i, j;
3
for (i = 0; i < M; i++)
4
for (j = 0; j < i; j++) {
5
long t = A[i][j];
6
A[i][j] = A[j][i];
7
A[j][i] = t;
8
}
9
}
When compiled with optimization level -O1, gcc generates the following code
for the inner loop of the function:
1
.L6:
2
movq
(%rdx), %rcx
3
movq
(%rax), %rsi
4
movq
%rsi, (%rdx)
5
movq
%rcx, (%rax)
6
addq
$8, %rdx
7
addq
$120, %rax
8
cmpq
%rdi, %rax
9
jne
.L6
We can see that gcc has converted the array indexing to pointer code.
A. Which register holds a pointer to array element A[i][j]?
B. Which register holds a pointer to array element A[j][i]?
C. What is the value of M?
3.66 ◆
Consider the following source code, where NR and NC are macro expressions de-
clared with #define that compute the dimensions of array A in terms of parame-
ter n. This code computes the sum of the elements of column j of the array.
