Solutions to Practice Problems
381
Solution to Problem 3.44 (page 311)
Understanding structure layout and alignment is very important for understand-
ing how much storage different data structures require and for understanding the
code generated by the compiler for accessing structures. This problem lets you
work out the details of some example structures.
A. struct P1 { short i; int c; int *j; short *d; };
i
c
j
d
Total
Alignment
0
2
6
14
16
8
B. struct P2 { int i[2]; char c[8]; short [4]; long *j; };
i
c
d
j
Total
Alignment
0
8
16
24
32
8
C. struct P3 { long w[2]; int *c[2] };
w
c
Total
Alignment
0
16
32
8
D. struct P4 { char w[16]; char *c[2] };
w
c
Total
Alignment
0
16
32
8
E. struct P5 { struct P4 a[2]; struct P1 t };
a
t
Total
Alignment
0
24
40
8
Solution to Problem 3.45 (page 311)
This is an exercise in understanding structure layout and alignment.
A. Here are the object sizes and byte offsets:
Field
a
b
c
d
e
f
g
h
Size
8
4
1
2
8
8
4
8
Offset
0
8
12
16
24
32
40
48
B. The structure is a total of 56 bytes long. The end of the structure does not
require padding to satisfy the 8-byte alignment requirement.
C. One strategy that works, when all data elements have a length equal to a
power of 2, is to order the structure elements in descending order of size.
This leads to a declaration:
