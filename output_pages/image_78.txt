64
CHAPTER  11    잡다한 기법
컴파일해본 프로그래머라면 컴파일에 실패할 것이고, 기존 코드나 헤더에 자신이 
무엇을 잘못 추가했는지 확인하려 할 것이다. 하지만 결국 유지보수 프로그래머는 
모든 버그가 원래부터 있었던 것임을 알고는 이를 찾으려 애써야 했던 즐거웠던 경
험에 대해 우리에게 감사해 할 것이다. 컴파일러의 몇몇 에러 확인 진단 옵션을 사
용하면 우리 프로그램이 컴파일되지 않을 수 있다. 컴파일러는 경계값 확인 등의 
기능을 수행할 수 있지만, 실제 업무에서 이 기능을 사용하는 프로그래머는 거의 
없으므로 우리도 이런 기능을 사용할 이유가 없다. 이런 미묘한 버그를 찾는 기쁨
과 즐거움을 컴파일러에게 빼앗긴다니 말이 되는가?
버그 수정과 업그레이드를 혼합하라
절대 “버그만 수정한” 버전을 릴리즈하지 말아라. 버그를 수정했으면 데이터베이
스 형식도 바꾸고, 복잡한 사용자 인터페이스도 변경하고, 관리자 인터페이스도 다
시 만들자. 이렇게 하면 사람들은 그냥 버그에 익숙해지려 하고 결국 버그를 기능
이라 부르기 시작할 것이다. 단지 이런 “기능”이 다른 방식으로 동작하길 바라는 
사용자만이 새로운 버전으로 업그레이드할 필요성을 느낄 것이다. 이런 방식으로 
유지보수 작업을 줄일 수 있고, 고객으로부터 얻는 수익도 늘어난다.
제품을 릴리즈할 때마다 파일 형식을 변경하라
미래 호환성을 원하는 고객이 많으므로 원하는 대로 해주자. 그러나 기존 버전과의 
호환성은 유지하지 않는 것이 핵심이다. 그러면 민감한 버그 수정 정책(윗글 참조)
과 함께 나온 새로운 버전이 나왔을 때, 고객이 한 번 새로운 버전을 사용하기 시
작했다면 다시 이전 버전으로 돌아갈 수 없게 된다. 결국 고객은 새로운 버전이 나
와도 업그레이드를 선택하지 않을 것이다. 추가 보너스 팁! 새로운 버전에서 생성
한 파일을 예전 버전에서 인식조차 못하게 하는 방법은 무엇이 있을까? 이런 방법
을 이용해 심지어는 같은 응용프로그램으로 만든 파일이 아니라고 거부할 수 있다. 
PC 워드 프로세서에서 이러한 복잡한 동작과 관련한 예제를 제공한다.
This eBook is licensed to 남궁진(jinvicky@naver.com). Personal use only
