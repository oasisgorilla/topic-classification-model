Section 3.6
Control
247
Aside
Describing machine code with C code
Figure 3.16 shows an example of how we will demonstrate the translation of C language control
constructs into machine code. The ﬁgure contains an example C function (a) and an annotated version
of the assembly code generated by gcc (c). It also contains a version in C that closely matches the
structure of the assembly code (b). Although these versions were generated in the sequence (a), (c),
and (b), we recommend that you read them in the order (a), (b), and then (c). That is, the C rendition
of the machine code will help you understand the key points, and this can guide you in understanding
the actual assembly code.
execution from this point, it completes the computations speciﬁed by the else
portion of function absdiff_se and returns. On the other hand, if the test x >= y
fails, the program procedure will carry out the steps speciﬁed by the if portion of
absdiff_se and return.
The assembly-code implementation (Figure 3.16(c)) ﬁrst compares the two
operands (line 2), setting the condition codes. If the comparison result indicates
that x is greater than or equal to y, it then jumps to a block of code starting at
line 8 that increments global variable ge_cnt, computes x-y as the return value,
and returns. Otherwise, it continues with the execution of code beginning at line
4 that increments global variable lt_cnt, computes y-x as the return value, and
returns. We can see, then, that the control ﬂow of the assembly code generated for
absdiff_se closely follows the goto code of gotodiff_se.
The general form of an if-else statement in C is given by the template
if (test-expr)
then-statement
else
else-statement
where test-expr is an integer expression that evaluates either to zero (interpreted
as meaning “false”) or to a nonzero value (interpreted as meaning “true”). Only
one of the two branch statements (then-statement or else-statement) is executed.
For this general form, the assembly implementation typically adheres to the
following form, where we use C syntax to describe the control ﬂow:
t = test-expr;
if (!t)
goto false;
then-statement
goto done;
false:
else-statement
done:
