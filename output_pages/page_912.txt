Section 9.12
Summary
911
memory-related bugs, the error will only become evident later in the program
when we notice that the values in y are corrupted.
9.11.10
Introducing Memory Leaks
Memory leaks are slow, silent killers that occur when programmers inadvertently
create garbage in the heap by forgetting to free allocated blocks. For example, the
following function allocates a heap block x and then returns without freeing it:
1
void leak(int n)
2
{
3
int *x = (int *)Malloc(n * sizeof(int));
4
5
return;
/* x is garbage at this point */
6
}
If leak is called frequently, then the heap will gradually ﬁll up with garbage,
in the worst case consuming the entire virtual address space. Memory leaks are
particularly serious for programs such as daemons and servers, which by deﬁnition
never terminate.
9.12
Summary
Virtual memory is an abstraction of main memory. Processors that support vir-
tual memory reference main memory using a form of indirection known as virtual
addressing. The processor generates a virtual address, which is translated into a
physical address before being sent to the main memory. The translation of ad-
dresses from a virtual address space to a physical address space requires close
cooperation between hardware and software. Dedicated hardware translates vir-
tual addresses using page tables whose contents are supplied by the operating
system.
Virtual memory provides three important capabilities. First, it automatically
caches recently used contents of the virtual address space stored on disk in main
memory. The block in a virtual memory cache is known as a page. A reference
to a page on disk triggers a page fault that transfers control to a fault handler
in the operating system. The fault handler copies the page from disk to the main
memory cache, writing back the evicted page if necessary. Second, virtual memory
simpliﬁes memory management, which in turn simpliﬁes linking, sharing data
between processes, the allocation of memory for processes, and program loading.
Finally, virtual memory simpliﬁes memory protection by incorporating protection
bits into every page table entry.
The process of address translation must be integrated with the operation of
any hardware caches in the system. Most page table entries are located in the L1
cache, but the cost of accessing page table entries from L1 is usually eliminated
by an on-chip cache of page table entries called a TLB.
