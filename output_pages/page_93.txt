92
Chapter 2
Representing and Manipulating Information
C. The least signiﬁcant byte set to all ones, and all other bytes of x left un-
changed. [0x876543FF]
Practice Problem 2.13 (solution page 183)
The Digital Equipment VAX computer was a very popular machine from the late
1970s until the late 1980s. Rather than instructions for Boolean operations and
and or, it had instructions bis (bit set) and bic (bit clear). Both instructions take
a data word x and a mask word m. They generate a result z consisting of the bits of
x modiﬁed according to the bits of m. With bis, the modiﬁcation involves setting
z to 1 at each bit position where m is 1. With bic, the modiﬁcation involves setting
z to 0 at each bit position where m is 1.
To see how these operations relate to the C bit-level operations, assume we
have functions bis and bic implementing the bit set and bit clear operations, and
that we want to use these to implement functions computing bitwise operations |
and ^, without using any other C operations. Fill in the missing code below. Hint:
Write C expressions for the operations bis and bic.
/* Declarations of functions implementing operations bis and bic */
int bis(int x, int m);
int bic(int x, int m);
/* Compute x|y using only calls to functions bis and bic */
int bool_or(int x, int y) {
int result =
;
return result;
}
/* Compute x^y using only calls to functions bis and bic */
int bool_xor(int x, int y) {
int result =
;
return result;
}
2.1.8
Logical Operations in C
C also provides a set of logical operators ||, &&, and !, which correspond to the
or, and, and not operations of logic. These can easily be confused with the bit-
level operations, but their behavior is quite different. The logical operations treat
any nonzero argument as representing true and argument 0 as representing false.
They return either 1 or 0, indicating a result of either true or false, respectively.
Here are some examples of expression evaluation:
