400
Chapter 4
Processor Architecture
Value
Name
Meaning
1
AOK
Normal operation
2
HLT
halt instruction encountered
3
ADR
Invalid address encountered
4
INS
Invalid instruction encountered
Figure 4.5
Y86-64 status codes. In our design, the processor halts for any code other
than AOK.
is executing normally, while the other codes indicate that some type of exception
has occurred. Code 2, named HLT, indicates that the processor has executed a halt
instruction. Code 3, named ADR, indicates that the processor attempted to read
from or write to an invalid memory address, either while fetching an instruction
or while reading or writing data. We limit the maximum address (the exact limit
varies by implementation), and any access to an address beyond this limit will
trigger an ADR exception. Code 4, named INS, indicates that an invalid instruction
code has been encountered.
For Y86-64, we will simply have the processor stop executing instructions
when it encounters any of the exceptions listed. In a more complete design, the
processor would typically invoke an exception handler, a procedure designated
to handle the speciﬁc type of exception encountered. As described in Chapter 8,
exception handlers can be conﬁgured to have different effects, such as aborting
the program or invoking a user-deﬁned signal handler.
4.1.5
Y86-64 Programs
Figure 4.6 shows x86-64 and Y86-64 assembly code for the following C function:
1
long sum(long *start, long count)
2
{
3
long sum = 0;
4
while (count) {
5
sum += *start;
6
start++;
7
count--;
8
}
9
return sum;
10
}
The x86-64 code was generated by the gcc compiler. The Y86-64 code is
similar, but with the following differences:
. The Y86-64 code loads constants into registers (lines 2–3), since it cannot use
immediate data in arithmetic instructions.
