Section 4.3
Sequential Y86-64 Implementations
447
Figure 4.31
SEQ PC update stage. The next
value of the PC is selected from
among the signals valC, valM,
and valP, depending on the
instruction code and the branch
ﬂag.
PC
New
PC
icode Cnd
valC
valM
valP
A ﬁnal function for the memory stage is to compute the status code Stat
resulting from the instruction execution according to the values of icode, imem_
error, and instr_valid generated in the fetch stage and the signal dmem_error
generated by the data memory.
Practice Problem 4.27 (solution page 525)
Write HCL code for Stat, generating the four status codes SAOK, SADR, SINS, and
SHLT (see Figure 4.26).
PC Update Stage
The ﬁnal stage in SEQ generates the new value of the program counter (see Figure
4.31). As the ﬁnal steps in Figures 4.18 to 4.21 show, the new PC will be valC, valM,
or valP, depending on the instruction type and whether or not a branch should be
taken. This selection can be described in HCL as follows:
word new_pc = [
# Call.
Use instruction constant
icode == ICALL : valC;
# Taken branch.
Use instruction constant
icode == IJXX && Cnd : valC;
# Completion of RET instruction.
Use value from stack
icode == IRET : valM;
# Default: Use incremented PC
1 : valP;
];
Surveying SEQ
We have now stepped through a complete design for a Y86-64 processor. We
have seen that by organizing the steps required to execute each of the different
instructions into a uniform ﬂow, we can implement the entire processor with a
small number of different hardware units and with a single clock to control the
sequencing of computations. The control logic must then route the signals between
these units and generate the proper control signals based on the instruction types
and the branch conditions.
