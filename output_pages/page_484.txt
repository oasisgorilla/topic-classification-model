Section 4.5
Pipelined Y86-64 Implementations
483
instruction gets canceled as well. No instruction following one that causes an ex-
ception can alter the programmer-visible state. The simple rule of carrying the
exception status together with all other information about an instruction through
the pipeline provides a simple and reliable mechanism for handling exceptions.
4.5.7
PIPE Stage Implementations
We have now created an overall structure for PIPE, our pipelined Y86-64 proces-
sor with forwarding. It uses the same set of hardware units as the earlier sequential
designs, with the addition of pipeline registers, some reconﬁgured logic blocks, and
additional pipeline control logic. In this section, we go through the design of the
different logic blocks, deferring the design of the pipeline control logic to the next
section. Many of the logic blocks are identical to their counterparts in SEQ and
SEQ+, except that we must choose proper versions of the different signals from
the pipeline registers (written with the pipeline register name, written in upper-
case, as a preﬁx) or from the stage computations (written with the ﬁrst character
of the stage name, written in lowercase, as a preﬁx).
As an example, compare the HCL code for the logic that generates the srcA
signal in SEQ to the corresponding code in PIPE:
# Code from SEQ
word srcA = [
icode in { IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ
} : rA;
icode in { IPOPQ, IRET } : RRSP;
1 : RNONE; # Don’t need register
];
# Code from PIPE
word d_srcA = [
D_icode in { IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ
} : D_rA;
D_icode in { IPOPQ, IRET } : RRSP;
1 : RNONE; # Don’t need register
];
They differ only in the preﬁxes added to the PIPE signals: D_ for the source
values, to indicate that the signals come from pipeline register D, and d_ for the
result value, to indicate that it is generated in the decode stage. To avoid repetition,
we will not show the HCL code here for blocks that only differ from those in SEQ
because of the preﬁxes on names. As a reference, the complete HCL code for
PIPE is given in Web Aside arch:hcl on page 508.
PC Selection and Fetch Stage
Figure 4.57 provides a detailed view of the PIPE fetch stage logic. As discussed
earlier, this stage must also select a current value for the program counter and
predict the next PC value. The hardware units for reading the instruction from
