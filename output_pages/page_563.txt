562
Chapter 5
Optimizing Program Performance
%rax
%rdx
%xmm0
vmulsd (%rdx), %xmm0, %xmm0
addq $8,%rdx
cmpq %rax,%rdx
jne loop 
%rax
%rdx
%xmm0
load
mul
add
cmp
jne
Figure 5.13
Graphical representation of inner-loop code for combine4. Instructions
are dynamically translated into one or two operations, each of which receives values
from other operations or from registers and produces values for other operations and for
registers. We show the target of the ﬁnal instruction as the label loop. It jumps to the
ﬁrst instruction shown.
As Figure 5.13 indicates, with our hypothetical processor design, the four in-
structions are expanded by the instruction decoder into a series of ﬁve operations,
with the initial multiplication instruction being expanded into a load operation
to read the source operand from memory, and a mul operation to perform the
multiplication.
As a step toward generating a data-ﬂow graph representation of the program,
the boxes and lines along the left-hand side of Figure 5.13 show how the registers
are used and updated by the different operations, with the boxes along the top
representing the register values at the beginning of the loop, and those along the
bottom representing the values at the end. For example, register %rax is only used
as a source value by the cmp operation, and so the register has the same value at
the end of the loop as at the beginning. Register %rdx, on the other hand, is both
used and updated within the loop. Its initial value is used by the load and add
operations; its new value is generated by the add operation, which is then used
by the cmp operation. Register %xmm0 is also updated within the loop by the mul
operation, which ﬁrst uses the initial value as a source value.
Some of the operations in Figure 5.13 produce values that do not correspond
to registers. We show these as arcs between operations on the right-hand side.
The load operation reads a value from memory and passes it directly to the
mul operation. Since these two operations arise from decoding a single vmulsd
instruction, there is no register associated with the intermediate value passing
between them. The cmp operation updates the condition codes, and these are
then tested by the jne operation.
For a code segment forming a loop, we can classify the registers that are
accessed into four categories:
