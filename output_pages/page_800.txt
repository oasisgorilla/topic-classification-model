Section 8.5
Signals
799
The signal function can change the action associated with a signal signum in
one of three ways:
. If handler is SIG_IGN, then signals of type signum are ignored.
. If handler is SIG_DFL, then the action for signals of type signum reverts to
the default action.
. Otherwise, handler is the address of a user-deﬁned function, called a signal
handler, that will be called whenever the process receives a signal of type
signum. Changing the default action by passing the address of a handler to
the signal function is known as installing the handler. The invocation of the
handler is called catching the signal. The execution of the handler is referred
to as handling the signal.
When a process catches a signal of type k, the handler installed for signal k is
invoked with a single integer argument set to k. This argument allows the same
handler function to catch different types of signals.
When the handler executes its return statement, control (usually) passes back
to the instruction in the control ﬂow where the process was interrupted by the
receipt of the signal. We say “usually” because in some systems, interrupted system
calls return immediately with an error.
Figure 8.30 shows a program that catches the SIGINT signal that is sent
whenever the user types Ctrl+C at the keyboard. The default action for SIGINT
code/ecf/sigint.c
1
#include "csapp.h"
2
3
void sigint_handler(int sig) /* SIGINT handler */
4
{
5
printf("Caught SIGINT!\n");
6
exit(0);
7
}
8
9
int main()
10
{
11
/* Install the SIGINT handler */
12
if (signal(SIGINT, sigint_handler) == SIG_ERR)
13
unix_error("signal error");
14
15
pause(); /* Wait for the receipt of a signal */
16
17
return 0;
18
}
code/ecf/sigint.c
Figure 8.30
A program that uses a signal handler to catch a SIGINT signal.
