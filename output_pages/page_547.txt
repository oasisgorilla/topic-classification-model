546
Chapter 5
Optimizing Program Performance
1
/* Convert string to lowercase: slow */
2
void lower1(char *s)
3
{
4
long i;
5
6
for (i = 0; i < strlen(s); i++)
7
if (s[i] >= ’A’ && s[i] <= ’Z’)
8
s[i] -= (’A’ - ’a’);
9
}
10
11
/* Convert string to lowercase: faster */
12
void lower2(char *s)
13
{
14
long i;
15
long len = strlen(s);
16
17
for (i = 0; i < len; i++)
18
if (s[i] >= ’A’ && s[i] <= ’Z’)
19
s[i] -= (’A’ - ’a’);
20
}
21
22
/* Sample implementation of library function strlen */
23
/* Compute length of string */
24
size_t strlen(const char *s)
25
{
26
long length = 0;
27
while (*s != ’\0’) {
28
s++;
29
length++;
30
}
31
return length;
32
}
Figure 5.7
Lowercase conversion routines. The two procedures have radically different
performance.
This analysis is conﬁrmed by actual measurements of the functions for differ-
ent length strings, as shown in Figure 5.8 (and using the library version of strlen).
The graph of the run time for lower1 rises steeply as the string length increases
(Figure 5.8(a)). Figure 5.8(b) shows the run times for seven different lengths (not
the same as shown in the graph), each of which is a power of 2. Observe that for
lower1 each doubling of the string length causes a quadrupling of the run time.
This is a clear indicator of a quadratic run time. For a string of length 1,048,576,
lower1 requires over 17 minutes of CPU time.
