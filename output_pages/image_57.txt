43
CHAPTER  06    코드 혼잡화
나타나므로 별로 신경 쓸 일이 아니라고 설득하자. 아름다움을 멀리하는 방법은 간
단하다. 아름다움을 멀리하므로 수동 정렬로 인한 수백만 번의 키 입력을 아낄 수 
있고, 정렬이 엉망인 코드를 오역하는 바람에 며칠을 낭비하는 일도 사라진다. 공
통 저장소에 코드를 저장할 때뿐 아니라 편집할 때에도 모두가 같은 정렬 형식을 
사용해야 한다고 주장하자. RWAR과 상사를 먼저 설득하자. 아마도 평화를 위해 
자동 정렬 기능은 사용 금지될 것이다. 자동 정렬이 금지되었으면 루프나 if문의 바
디가 실제보다 길어 보이거나 짧아 보이게 정렬할 수 있다. 혹은 else 문을 다른 if
와 연관되는 것처럼 보이게 할 수도 있다. 물론 모든 일은 우발적으로 일어나는 것
일 뿐이다. 
if(a)
	
if(b) x=y; 
else x=z; 
매크로 전처리기 
매크로 전처리기는 코드 난독화를 할 좋은 기회를 제공한다. 핵심은 매크로 확장을 
여러 단계에 거쳐 확장하고 여러 *.hpp 파일을 이용해야 뜻을 파악할 수 있게 만
드는 것이다. 실행할 코드를 매크로에 넣은 다음 모든 *.cpp 파일에서 이 매크로를 
가져다 사용하므로(매크로를 쓰지 않더라도 이렇게 하는 것이 좋다) 코드가 변경될 
때마다 다시 컴파일해야 할 코드 양을 극대화 할 수 있다. 
일관성 부족을 악용하라 
자바에서 배열 선언은 정말 어지럽다. 예전 C 형식으로 할 수 있고, string x[]와 
같은 방식도 가능하며(배열 표시 위치가 앞-뒤로 혼합된 형태), string[] x(배열 
표시가 앞쪽에 오는 형태)와 같이 선언할 수 있다. 사람들에게 혼란을 주려면 다음
과 같이 여러 표기법을 혼합한다. 
byte[ ] rowvector, colvector , matrix[ ]; 
