274
Chapter 3
Machine-Level Representation of Programs
(a) Code
void switcher(long a, long b, long c, long *dest)
a in %rsi, b in %rdi, c in %rdx, d in %rcx
1
switcher:
2
cmpq
$7, %rdi
3
ja
.L2
4
jmp
*.L4(,%rdi,8)
5
.section
.rodata
6
.L7:
7
xorq
$15, %rsi
8
movq
%rsi, %rdx
9
.L3:
10
leaq
112(%rdx), %rdi
11
jmp
.L6
12
.L5:
13
leaq
(%rdx,%rsi), %rdi
14
salq
$2, %rdi
15
jmp
.L6
16
.L2:
17
movq
%rsi, %rdi
18
.L6:
19
movq
%rdi, (%rcx)
20
ret
(b) Jump table
1
.L4:
2
.quad
.L3
3
.quad
.L2
4
.quad
.L5
5
.quad
.L2
6
.quad
.L6
7
.quad
.L7
8
.quad
.L2
9
.quad
.L5
Figure 3.24
Assembly code and jump table for Problem 3.31.
3.7
Procedures
Procedures are a key abstraction in software. They provide a way to package code
that implements some functionality with a designated set of arguments and an
optional return value. This function can then be invoked from different points in
a program. Well-designed software uses procedures as an abstraction mechanism,
hiding the detailed implementation of some action while providing a clear and
concise interface deÔ¨Ånition of what values will be computed and what effects
the procedure will have on the program state. Procedures come in many guises
