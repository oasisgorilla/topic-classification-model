Section 3.9
Heterogeneous Data Structures
311
struct S2 {
int
i;
int
j;
char c;
};
If we pack this structure into 9 bytes, we can still satisfy the alignment requirements
for ﬁelds i and j by making sure that the starting address of the structure satisﬁes
a 4-byte alignment requirement. Consider, however, the following declaration:
struct S2 d[4];
With the 9-byte allocation, it is not possible to satisfy the alignment requirement
for each element of d, because these elements will have addresses xd, xd + 9,
xd + 18, and xd + 27. Instead, the compiler allocates 12 bytes for structure S2,
with the ﬁnal 3 bytes being wasted space:
Offset 
Contents 
i
0
4
9
8
12
c
j
That way, the elements of d will have addresses xd, xd + 12, xd + 24, and xd + 36.
As long as xd is a multiple of 4, all of the alignment restrictions will be satisﬁed.
Practice Problem 3.44 (solution page 381)
For each of the following structure declarations, determine the offset of each ﬁeld,
the total size of the structure, and its alignment requirement for x86-64:
A. struct P1 { short i; int c; int *j; short *d; };
B. struct P2 { int i[2]; char c[8]; short s[4]; long *j; };
C. struct P3 { long w[2]; int *c[2] };
D. struct P4 { char w[16]; char *c[2] };
E. struct P5 { struct P4 a[2]; struct P1 t };
Practice Problem 3.45 (solution page 381)
Answer the following for the structure declaration
struct {
int
*a;
float
b;
char
c;
short
d;
long
e;
double f;
