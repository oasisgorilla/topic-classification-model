Homework Problems
607
Inner loop of inner4.
data_t = double, OP = *
udata in %rbp, vdata in %rax, sum in %xmm0
i in %rcx, limit in %rbx
1
.L15:
loop:
2
vmovsd
0(%rbp,%rcx,8), %xmm1
Get udata[i]
3
vmulsd
(%rax,%rcx,8), %xmm1, %xmm1
Multiply by vdata[i]
4
vaddsd
%xmm1, %xmm0, %xmm0
Add to sum
5
addq
$1, %rcx
Increment i
6
cmpq
%rbx, %rcx
Compare i:limit
7
jne
.L15
If !=, goto loop
Assume that the functional units have the characteristics listed in Figure 5.12.
A. Diagram how this instruction sequence would be decoded into operations
and show how the data dependencies between them would create a critical
path of operations, in the style of Figures 5.13 and 5.14.
B. For data type double, what lower bound on the CPE is determined by the
critical path?
C. Assuming similar instruction sequences for the integer code as well, what
lower bound on the CPE is determined by the critical path for integer data?
D. Explain how the ﬂoating-point versions can have CPEs of 3.00, even though
the multiplication operation requires 5 clock cycles.
5.14 ◆
Write a version of the inner product procedure described in Problem 5.13 that
uses 6 × 1 loop unrolling. For x86-64, our measurements of the unrolled version
give a CPE of 1.07 for integer data but still 3.01 for both ﬂoating-point data.
A. Explain why any (scalar) version of an inner product procedure running on
an Intel Core i7 Haswell processor cannot achieve a CPE less than 1.00.
B. Explain why the performance for ﬂoating-point data did not improve with
loop unrolling.
5.15 ◆
Write a version of the inner product procedure described in Problem 5.13 that
uses 6 × 6 loop unrolling. Our measurements for this function with x86-64 give a
CPE of 1.06 for integer data and 1.01 for ﬂoating-point data.
What factor limits the performance to a CPE of 1.00?
5.16 ◆
Write a version of the inner product procedure described in Problem 5.13 that
uses 6 × 1a loop unrolling to enable greater parallelism. Our measurements for
this function give a CPE of 1.10 for integer data and 1.05 for ﬂoating-point data.
5.17 ◆◆
The library function memset has the following prototype:
void *memset(void *s, int c, size_t n);
