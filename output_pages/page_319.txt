318
Chapter 3
Machine-Level Representation of Programs
6
call
puts
Call puts
7
addq
$24, %rsp
Deallocate stack space
8
ret
Return
Figure 3.40 illustrates the stack organization during the execution of echo. The
program allocates 24 bytes on the stack by subtracting 24 from the stack pointer
(line 2). Character buf is positioned at the top of the stack, as can be seen by the
fact that %rsp is copied to %rdi to be used as the argument to the calls to both
gets and puts. The 16 bytes between buf and the stored return pointer are not
used. As long as the user types at most seven characters, the string returned by
gets (including the terminating null) will ﬁt within the space allocated for buf.
A longer string, however, will cause gets to overwrite some of the information
stored on the stack. As the string gets longer, the following information will get
corrupted:
Characters typed
Additional corrupted state
0–7
None
9–23
Unused stack space
24–31
Return address
32+
Saved state in caller
No serious consequence occurs for strings of up to 23 characters, but beyond
that, the value of the return pointer, and possibly additional saved state, will
be corrupted. If the stored value of the return address is corrupted, then the
ret instruction (line 8) will cause the program to jump to a totally unexpected
location. None of these behaviors would seem possible based on the C code. The
impact of out-of-bounds writing to memory by functions such as gets can only be
understood by studying the program at the machine-code level.
Our code for echo is simple but sloppy. A better version involves using the
function fgets, which includes as an argument a count on the maximum number
of bytes to read. Problem 3.71 asks you to write an echo function that can handle
an input string of arbitrary length. In general, using gets or any function that
can overﬂow storage is considered a bad programming practice. Unfortunately,
a number of commonly used library functions, including strcpy, strcat, and
sprintf, have the property that they can generate a byte sequence without being
given any indication of the size of the destination buffer [97]. Such conditions can
lead to vulnerabilities to buffer overﬂow.
Practice Problem 3.46 (solution page 382)
Figure 3.41 shows a (low-quality) implementation of a function that reads a line
from standard input, copies the string to newly allocated storage, and returns a
pointer to the result.
Consider the following scenario. Procedure get_line is called with the return
address equal to 0x400776 and register %rbx equal to 0x0123456789ABCDEF. You
type in the string
0123456789012345678901234
