Section 4.5
Pipelined Y86-64 Implementations
497
Figure 4.67
Pipeline states for special
control conditions. The
two pairs indicated can
arise simultaneously.
Load/use
M
Mispredict
ret 1
ret 2
ret 3
E
D
M
E
JXX
Load
ret
Use
bubble
ret
bubble
bubble
ret
D
M
Combination A
Combination B
E
D
M
E
D
M
E
D
conditions. These diagrams show blocks for the decode, execute, and memory
stages. The shaded boxes represent particular constraints that must be satisﬁed
for the condition to arise. A load/use hazard requires that the instruction in the
execute stage reads a value from memory into a register, and that the instruction
in the decode stage has this register as a source operand. A mispredicted branch
requires the instruction in the execute stage to have a jump instruction. There are
three possible cases for ret—the instruction can be in either the decode, execute,
or memory stage. As the ret instruction moves through the pipeline, the earlier
pipeline stages will have bubbles.
We can see by these diagrams that most of the control conditions are mutually
exclusive. For example, it is not possible to have a load/use hazard and a mispre-
dicted branch simultaneously, since one requires a load instruction (mrmovq or
popq) in the execute stage, while the other requires a jump. Similarly, the second
and third ret combinations cannot occur at the same time as a load/use hazard or
a mispredicted branch. Only the two combinations indicated by arrows can arise
simultaneously.
Combination A involves a not-taken jump instruction in the execute stage and
a ret instruction in the decode stage. Setting up this combination requires the ret
to be at the target of a not-taken branch. The pipeline control logic should detect
that the branch was mispredicted and therefore cancel the ret instruction.
Practice Problem 4.37 (solution page 528)
Write a Y86-64 assembly-language program that causes combination A to arise
and determines whether the control logic handles it correctly.
Combining the control actions for the combination A conditions (Figure 4.66),
we get the following pipeline control actions (assuming that either a bubble or a
stall overrides the normal case):
Pipeline register
Condition
F
D
E
M
W
Processing ret
stall
bubble
normal
normal
normal
Mispredicted branch
normal
bubble
bubble
normal
normal
Combination
stall
bubble
bubble
normal
normal
