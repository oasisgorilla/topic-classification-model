Section 12.2
Concurrent Programming with I/O Multiplexing
1019
code/conc/echoservers.c
1
void init_pool(int listenfd, pool *p)
2
{
3
/* Initially, there are no connected descriptors */
4
int i;
5
p->maxi = -1;
6
for (i=0; i< FD_SETSIZE; i++)
7
p->clientfd[i] = -1;
8
9
/* Initially, listenfd is only member of select read set */
10
p->maxfd = listenfd;
11
FD_ZERO(&p->read_set);
12
FD_SET(listenfd, &p->read_set);
13
}
code/conc/echoservers.c
Figure 12.9
init_pool initializes the pool of active clients.
code/conc/echoservers.c
1
void add_client(int connfd, pool *p)
2
{
3
int i;
4
p->nready--;
5
for (i = 0; i < FD_SETSIZE; i++) /* Find an available slot */
6
if (p->clientfd[i] < 0) {
7
/* Add connected descriptor to the pool */
8
p->clientfd[i] = connfd;
9
Rio_readinitb(&p->clientrio[i], connfd);
10
11
/* Add the descriptor to descriptor set */
12
FD_SET(connfd, &p->read_set);
13
14
/* Update max descriptor and pool high water mark */
15
if (connfd > p->maxfd)
16
p->maxfd = connfd;
17
if (i > p->maxi)
18
p->maxi = i;
19
break;
20
}
21
if (i == FD_SETSIZE) /* Couldnâ€™t find an empty slot */
22
app_error("add_client error: Too many clients");
23
}
code/conc/echoservers.c
Figure 12.10
add_client adds a new client connection to the pool.
