Chapter 2
Representing and Manipulating Information
69
The computer might not generate the expected result, but at least it is con-
sistent!
Floating-point arithmetic has altogether different mathematical properties.
The product of a set of positive numbers will always be positive, although over-
ﬂow will yield the special value +∞. Floating-point arithmetic is not associative
due to the ﬁnite precision of the representation. For example, the C expression
(3.14+1e20)-1e20 will evaluate to 0.0 on most machines, while 3.14+(1e20-
1e20) will evaluate to 3.14. The different mathematical properties of integer
versus ﬂoating-point arithmetic stem from the difference in how they handle the
ﬁniteness of their representations—integer representations can encode a compar-
atively small range of values, but do so precisely, while ﬂoating-point representa-
tions can encode a wide range of values, but only approximately.
By studying the actual number representations, we can understand the ranges
of values that can be represented and the properties of the different arithmetic
operations. This understanding is critical to writing programs that work correctly
over the full range of numeric values and that are portable across different combi-
nations of machine, operating system, and compiler. As we will describe, a number
of computer security vulnerabilities have arisen due to some of the subtleties of
computer arithmetic. Whereas in an earlier era program bugs would only incon-
venience people when they happened to be triggered, there are now legions of
hackers who try to exploit any bug they can ﬁnd to obtain unauthorized access
to other people’s systems. This puts a higher level of obligation on programmers
to understand how their programs work and how they can be made to behave in
undesirable ways.
Computers use several different binary representations to encode numeric
values. You will need to be familiar with these representations as you progress
into machine-level programming in Chapter 3. We describe these encodings in
this chapter and show you how to reason about number representations.
We derive several ways to perform arithmetic operations by directly ma-
nipulating the bit-level representations of numbers. Understanding these tech-
niques will be important for understanding the machine-level code generated by
compilers in their attempt to optimize the performance of arithmetic expression
evaluation.
Our treatment of this material is based on a core set of mathematical prin-
ciples. We start with the basic deﬁnitions of the encodings and then derive such
properties as the range of representable numbers, their bit-level representations,
and the properties of the arithmetic operations. We believe it is important for you
to examine the material from this abstract viewpoint, because programmers need
to have a clear understanding of how computer arithmetic relates to the more
familiar integer and real arithmetic.
The C++ programming language is built upon C, using the exact same numeric
representations and operations. Everything said in this chapter about C also holds
for C++. The Java language deﬁnition, on the other hand, created a new set of
standards for numeric representations and operations. Whereas the C standards
are designed to allow a wide range of implementations, the Java standard is quite
speciﬁc on the formats and encodings of data. We highlight the representations
and operations supported by Java at several places in the chapter.
