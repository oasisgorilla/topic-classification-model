594
Chapter 5
Optimizing Program Performance
Figure 5.35
Graphical representation
of inner-loop code
for write_read. The
ﬁrst movl instruction is
decoded into separate
operations to compute the
store address and to store
the data to memory.
%rax
%rdi
%rsi
%rdx
movq %rax,(%rsi)
movq (%rdi),%rax
addq $1,%rax
subq $1,%rdx
jne loop 
%rax
%rdi
%rsi
%rdx
s_addr
s_data
load
add
sub
jne
Figure 5.35 shows a data-ﬂow representation of this loop code. The instruction
movq %rax,(%rsi) is translated into two operations: The s_addr instruction com-
putes the address for the store operation, creates an entry in the store buffer, and
sets the address ﬁeld for that entry. The s_data operation sets the data ﬁeld for the
entry. As we will see, the fact that these two computations are performed inde-
pendently can be important to program performance. This motivates the separate
functional units for these operations in the reference machine.
In addition to the data dependencies between the operations caused by the
writing and reading of registers, the arcs on the right of the operators denote
a set of implicit dependencies for these operations. In particular, the address
computation of the s_addr operation must clearly precede the s_data operation. In
addition, the load operation generated by decoding the instruction movq (%rdi),
%rax must check the addresses of any pending store operations, creating a data
dependency between it and the s_addr operation. The ﬁgure shows a dashed arc
between the s_data and load operations. This dependency is conditional: if the
two addresses match, the load operation must wait until the s_data has deposited
its result into the store buffer, but if the two addresses differ, the two operations
can proceed independently.
Figure 5.36 illustrates the data dependencies between the operations for the
inner loop of write_read. In Figure 5.36(a), we have rearranged the operations
to allow the dependencies to be seen more clearly. We have labeled the three
dependencies involving the load and store operations for special attention. The arc
labeled “1” represents the requirement that the store address must be computed
before the data can be stored. The arc labeled “2” represents the need for the
load operation to compare its address with that for any pending store operations.
Finally, the dashed arc labeled “3” represents the conditional data dependency
that arises when the load and store addresses match.
Figure 5.36(b) illustrates what happens when we take away those operations
that do not directly affect the ﬂow of data from one iteration to the next. The
data-ﬂow graph shows just two chains of dependencies: the one on the left, with
data values being stored, loaded, and incremented (only for the case of matching
addresses); and the one on the right, decrementing variable cnt.
