948
Chapter 10
System-Level I/O
The Unix I/O model is implemented in the operating system kernel. It is avail-
able to applications through functions such as open, close, lseek, read, write,
and stat. The higher-level Rio and standard I/O functions are implemented “on
top of” (using) the Unix I/O functions. The Rio functions are robust wrappers for
read and write that were developed speciﬁcally for this textbook. They automati-
cally deal with short counts and provide an efﬁcient buffered approach for reading
text lines. The standard I/O functions provide a more complete buffered alterna-
tive to the Unix I/O functions, including formatted I/O routines such as printf
and scanf.
So which of these functions should you use in your programs? Here are some
basic guidelines:
G1: Use the standard I/O functions whenever possible. The standard I/O func-
tions are the method of choice for I/O on disk and terminal devices. Most
C programmers use standard I/O exclusively throughout their careers,
never bothering with the lower-level Unix I/O functions (except possibly
stat, which has no counterpart in the standard I/O library). Whenever
possible, we recommend that you do likewise.
G2: Don’t use scanf or rio_readlineb to read binary ﬁles.Functions like scanf
and rio_readlineb are designed speciﬁcally for reading text ﬁles. A
common error that students make is to use these functions to read binary
data, causing their programs to fail in strange and unpredictable ways.
For example, binary ﬁles might be littered with many 0xa bytes that have
nothing to do with terminating text lines.
G3: Use the Rio functions for I/O on network sockets. Unfortunately, standard
I/O poses some nasty problems when we attempt to use it for input and
output on networks. As we will see in Section 11.4, the Linux abstrac-
tion for a network is a type of ﬁle called a socket. Like any Linux ﬁle,
sockets are referenced by ﬁle descriptors, known in this case as socket de-
scriptors. Application processes communicate with processes running on
other computers by reading and writing socket descriptors.
Standard I/O streams are full duplex in the sense that programs can perform
input and output on the same stream. However, there are poorly documented
restrictions on streams that interact badly with restrictions on sockets:
Restriction 1: Input functions following output functions. An input function
cannot follow an output function without an intervening call to fflush,
fseek, fsetpos, or rewind. The fflush function empties the buffer as-
sociated with a stream. The latter three functions use the Unix I/O lseek
function to reset the current ﬁle position.
Restriction 2: Output functions following input functions. An output function
cannot follow an input function without an intervening call to fseek,
fsetpos, or rewind, unless the input function encounters an end-of-ﬁle.
