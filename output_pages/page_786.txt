Section 8.4
Process Control
785
code/ecf/waitpid2.c
1
#include "csapp.h"
2
#define N 2
3
4
int main()
5
{
6
int status, i;
7
pid_t pid[N], retpid;
8
9
/* Parent creates N children */
10
for (i = 0; i < N; i++)
11
if ((pid[i] = Fork()) == 0)
/* Child */
12
exit(100+i);
13
14
/* Parent reaps N children in order */
15
i = 0;
16
while ((retpid = waitpid(pid[i++], &status, 0)) > 0) {
17
if (WIFEXITED(status))
18
printf("child %d terminated normally with exit status=%d\n",
19
retpid, WEXITSTATUS(status));
20
else
21
printf("child %d terminated abnormally\n", retpid);
22
}
23
24
/* The only normal termination is if there are no more children */
25
if (errno != ECHILD)
26
unix_error("waitpid error");
27
28
exit(0);
29
}
code/ecf/waitpid2.c
Figure 8.19
Using waitpid to reap zombie children in the order they were created.
8.4.4
Putting Processes to Sleep
The sleep function suspends a process for a speciÔ¨Åed period of time.
#include <unistd.h>
unsigned int sleep(unsigned int secs);
Returns: seconds left to sleep
Sleep returns zero if the requested amount of time has elapsed, and the number of
seconds still left to sleep otherwise. The latter case is possible if the sleep function
