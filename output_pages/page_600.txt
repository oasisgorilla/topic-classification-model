Section 5.14
Identifying and Eliminating Performance Bottlenecks
599
the relative importance of the different functions in determining the overall run
time. The calling information allows us to understand the dynamic behavior of the
program.
Proﬁling with gprof requires three steps, as shown for a C program prog.c,
which runs with command-line argument file.txt:
1. The program must be compiled and linked for proﬁling. With gcc (and other
C compilers), this involves simply including the run-time ﬂag -pg on the
command line. It is important to ensure that the compiler does not attempt to
perform any optimizations via inline substitution, or else the calls to functions
may not be tabulated accurately. We use optimization ﬂag -Og, guaranteeing
that function calls will be tracked properly.
linux> gcc -Og -pg prog.c -o prog
2. The program is then executed as usual:
linux> ./prog file.txt
It runs slightly (around a factor of 2) slower than normal, but otherwise the
only difference is that it generates a ﬁle gmon.out.
3. gprof is invoked to analyze the data in gmon.out:
linux> gprof prog
The ﬁrst part of the proﬁle report lists the times spent executing the different
functions, sorted in descending order. As an example, the following listing shows
this part of the report for the three most time-consuming functions in a program:
%
cumulative
self
self
total
time
seconds
seconds
calls
s/call
s/call
name
97.58
203.66
203.66
1
203.66
203.66
sort_words
2.32
208.50
4.85
965027
0.00
0.00
find_ele_rec
0.14
208.81
0.30 12511031
0.00
0.00
Strlen
Each row represents the time spent for all calls to some function. The ﬁrst
column indicates the percentage of the overall time spent on the function. The
second shows the cumulative time spent by the functions up to and including
the one on this row. The third shows the time spent on this particular function,
and the fourth shows how many times it was called (not counting recursive calls).
In our example, the function sort_words was called only once, but this single
call required 203.66 seconds, while the function find_ele_rec was called 965,027
times (not including recursive calls), requiring a total of 4.85 seconds. Function
Strlen computes the length of a string by calling the library function strlen.
Library function calls are normally not shown in the results by gprof. Their times
are usually reported as part of the function calling them. By creating the “wrapper
function” Strlen, we can reliably track the calls to strlen, showing that it was
called 12,511,031 times but only requiring a total of 0.30 seconds.
