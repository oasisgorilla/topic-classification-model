790
Chapter 8
Exceptional Control Flow
code/ecf/shellex.c
1
#include "csapp.h"
2
#define MAXARGS
128
3
4
/* Function prototypes */
5
void eval(char *cmdline);
6
int parseline(char *buf, char **argv);
7
int builtin_command(char **argv);
8
9
int main()
10
{
11
char cmdline[MAXLINE]; /* Command line */
12
13
while (1) {
14
/* Read */
15
printf("> ");
16
Fgets(cmdline, MAXLINE, stdin);
17
if (feof(stdin))
18
exit(0);
19
20
/* Evaluate */
21
eval(cmdline);
22
}
23
}
code/ecf/shellex.c
Figure 8.23
The main routine for a simple shell program.
After parsing the command line, the eval function calls the builtin_command
function, which checks whether the ﬁrst command-line argument is a built-in shell
command. If so, it interprets the command immediately and returns 1. Otherwise,
it returns 0. Our simple shell has just one built-in command, the quit command,
which terminates the shell. Real shells have numerous commands, such as pwd,
jobs, and fg.
If builtin_command returns 0, then the shell creates a child process and
executes the requested program inside the child. If the user has asked for the
program to run in the background, then the shell returns to the top of the loop and
waits for the next command line. Otherwise the shell uses the waitpid function
to wait for the job to terminate. When the job terminates, the shell goes on to the
next iteration.
Notice that this simple shell is ﬂawed because it does not reap any of its
background children. Correcting this ﬂaw requires the use of signals, which we
describe in the next section.
