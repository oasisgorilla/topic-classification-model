13 | 제화공은 신발이 없다
자신의 원장을 워드 프로세서로 관리해달라고 주장하는 회계사 고객이 있다고 가
정하자. 아마 우리는 데이터를 구조해야 한다고 그를 설득할 것이다. 그는 상호 간
의 필드 검사와 유효성 검사도 요구한다. 우리는 동시 업데이트를 지원하는 데이터
베이스에 데이터를 저장하는 것이 유리하다고 그를 설득할 것이다.
소프트웨어 개발자 고객의 경우를 살펴보자. 그는 모든 데이터(소스코드를) 텍스트
편집기에 보존해야 한다고 주장한다. 그는 아직 워드 프로세서의 색상, 형식 크기,
폰트 등을 사용해본 적이 없다.
소스코드를 구조화된 데이터로 저장하면 무슨 일이 일어날까? 하나의 소스코드를
자바, NextRex, 의사결정 테이블, 플로우 차트, 루프 구조 뼈대(상세 내용 없이),
상세 내용이나 주석을 제거한 자바, 현재 관심이 있는 변수와 메소드 호출을 하이
라이트한 자바 코드, 매개변수 이름과 형식에 대한 주석을 포함하는 자바 코드 등
의 다양한 방식으로 볼 수 있다. 복잡한 수식 표현을 TeX나 수학자들이 하듯이 2
차원으로 확인할 수 있다. 괄호를 추가하거나 뺀(자신의 우선순위 규칙 취향에 따
라) 형태의 코드도 확인할 수 있다. 괄호는 다양한 크기와 색을 눈으로 구별하는 데
유용하다. 선택적으로 제거하거나 적용할 수 있는 투명한 오버레이 집합을 사용해
서 다른 나라에서 일하는 팀의 다른 프로그래머를 실시간으로 볼 수 있고 작업 중
인 코드 변경 사항도 확인할 수 있다.
색상을 이용해 미묘한 단서의 실마리로 사용할 수 있다. 예를 들어, 각 패키지/클래
스에 색상을 자동으로 지정해서 클래스의 메소드나 변수의 레퍼런스 백그라운드에
파스텔 그림자를 사용할 수 있다. 특정 식별자의 정의에 볼드체를 적용해서 두드러
지게 할 수도 있다.
“X 형식의 오브젝트를 생성하려면 어떤 메소드나 생성자를 사용해야 하는가?”,
“오브젝트 X 형식을 파라미터로 받는 메소드는 어디 있는가?”, “코드에서 어떤 변
수에 접근할 수 있는가?”와 같은 질문을 할 수 있다. 메소드 호출이나 변수 레퍼런
스를 클릭 하면 관련 정의를 확인할 수 있고, 어떤 버전의 메소드가 실제 실행될 것
인지 쉽게 확인할 수 있다. 지정한 메소드나 변수의 모든 레퍼런스를 확인하면서
체크 표시를 할 수도 있다. 가리키고 클릭하는 동작으로도 많은 일을 할 수 있으므
로 코드를 직접 작성하는 일이 줄어든다.
지금까지 살펴본 사항 중 몇 가지는 실현 불가능할 수도 있다. 어떤 것이 실생활에
꼭 필요한 것인지 알아보려면 부딪쳐 보는 수밖에 없다. 기본 도구를 얻었으면 유지
보수 프로그래머의 생활을 개선할 수 있도록 수많은 아이디어를 실험해봐야 한다.
마지막으로, 이 글은 농담일 뿐이다! 혹시라도 이 글의 내용을 있는 그대로 받아들
인 이가 있다면 정중히 사과한다. 내가 유지보수할 수 있는 코드를 작성하는 방법
에 관해 지껄 일때면 사람들은 별로 관심을 가지지 않았다. 어느날 일을 그르치는
얼간이 같은 행동을 얘기해야 사람들이 더 반응을 보인다는 사실을 알게 됐다. 유
지보수할 수 없는 디자인 패턴을 확인하므로 더 효과적으로 악의적인 혹은 부지불
식간에 일어나는 나쁜 일을 예방할 수 있다.