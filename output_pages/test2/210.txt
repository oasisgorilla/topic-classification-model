12 | 철학
컴파일러나 시스템 클래스를 만드는 사람이 보통 언어를 설계한다. 당연한 일이지
만, 그들은 자신의 작업을 용이하게 수학 계산을 간단히 할 수 있는 방식으로 언어
를 설계한다. 그러나 한 컴파일러를 구현하는 사람 뒤에는 10,000명의 유지보수
프로그래머가 필요하다. 정작 힘들게 일하는 유지보수 프로그래머는 언어 설계 단
계에서 의견을 내지 못한다. 그러나 유지보수 프로그래머가 작성한 코드 양에 비하
면 컴파일러 코드는 한없이 작을 뿐이다.
이런 엘리트 주의적인 생각은 JDBC 인터페이스에서 잘 나타난다. JDBC 인터페이
스는 JDBC 구현자의 삶을 쉽게 만들어 준다. 그러나 유지보수 프로그래머에게는
악몽을 가져다 주었다. JDBC 인터페이스는 삼십년 전에 나온 포트란의 SQL 인터
페이스보다 못하다.
유지보수 프로그래머는 세부사항은 감추어서 나무로 이루어진 숲을 볼 수 있게 해
달라고 요청한다. 그들은 다양한 종류의 단축shortcut 방법을 이용해서 많은 코드를
타이핑하지 않아도 되고, 따라서 프로그램을 화면으로 확인하기 쉽게 해달라고 요
청한다. 유지보수 프로그래머는 컴파일러가 요구하는 많은 하찮은 작업으로부터
해방시켜 달라고 큰소리로 불평한다.
이와 같은 노력에 부흥하는 결과로 현재 작업과 관계없는 세부 사항은 감출 수 있
는 NetRexx, Bali 그리고 비주얼 편집기(예를 들어, IBM의 비주얼 에이지를 시작
으로) 등이 소개됐다. 