헝가리안 표기법
헝가리안 표기법은 소스코드 판독을 어렵게 하는 핵폭탄급 기법 중 하나다. 헝가리
안 표기법을 사용해보자! 소스코드는 방대하므로 헝가리안 표기법을 활용해 적절
하게 코드를 오염시킨다면, 그 어떤 방법보다도 효율적으로 유지보수 엔지니어를
쓰러뜨릴 수 있다. 아래는 헝가리안 표기법의 본래 의도를 무력화하는 팁이다.
C++에서 “c”를 const에 사용하라(C++). “c”는 C++ 이외의 언어에서는 보통 변
수가 상수임을 가리킨다.
다른 언어에서는 다른 의미로 해석되는 헝가리안 물혹(wart, 덧붙이는 음절이나
단어)을 찾고 사용하라. 예를 들어, C++ 코딩에서 모든 제어 형식에 “l_”과 “a_”와
같은 범위를 가리키는 접두어(파워빌더에 l은 지역을 a는 매개변수를 가리킨다)와
VB 스타일의 헝가리안 물혹을 사용하라. MFC 소스코드에서 제어 형식에 헝가리
안 물혹 표기법을 사용하지 않는다는 사실을 마치 모르는 것처럼 행동하라.
공통적으로 자주 사용하는 변수는 되도록이면 추가 정보를 포함하지 말아야 한다
는 헝가리안 원칙을 항상 위반하자. 위에서 설명한 기법들을 총동원하고 각 클래스
형식은 커스텀 접두 물혹을 가지고 있다고 주장하므로 이를 달성할 수 있다. 물혹
이 없는 것은 클래스임을 의미한다는 사실을 간파할 수 없게 해야 한다. 이는 정말
중요한 원칙이다. 이 원칙을 지키지 못하면 소스코드에 모음/자음 비율이 높아지
면서 짧은 변수명이 범람하게 된다. 최악의 경우 소스코드 판독 방해 작전이 실패
할 수 있고 자신도 모르는 새에 영어 표기법이 코드에 나타날 수 있다!
함수 파라미터와 여타 심볼은 이름을 통해 의미를 나타내야 한다는 헝가리안 개념
을 노골적으로 위반하자. 그러나 헝가리안 형식 물혹 자체의 사용이 변수를 임시
변수로 보이게 할 수 있다.
의미상 전혀 연관이 없는 헝가리안 물혹 여러 개를 덧붙여 사용해보자. 실생활에서
활용된 예를 들면 “a_crszkvc30Last-NameCol” 같은 변수를 만들 수 있다. 유지
보수 엔지니어 팀 전체가 이 변수명을 “이 변수는 const이고 레퍼런스 형식으로 함
수 매개변수로 사용되는데 테이블의 기본 키 가운데 하나인 ‘LastName’이라는 이
름의 Varchar[30] 형식의 데이터베이스 열에서 가져온 데이터를 담고 있다”라고
해독하는데 3일이 걸렸다. “모든 변수는 public이어야 한다”라는 규칙을 이 기법
에 접목하면 수천 라인의 코드를 대체할 수 있는 막강한 파워를 발휘할 수 있다!
사람의 뇌는 동시에 오직 7개의 정보를 유지할 수 있다는 원칙을 마음껏 활용하자.
위 규칙을 따른다는 것은 다음과 같은 코드를 작성한다는 것을 의미한다.
1. 하나의 할당문에 14개의 형식과 이름 정보를 사용한다.
2. 하나의 함수가 3개의 매개변수를 전달하고 29개의 형식과 이름 정보를
가진 결과값을 할당한다.
3. 적당히 복잡한 중첩 구조를 이용하면 단기 기억의 한계를 가볍게 초과할
수 있다. 특히 유지보수 프로그래머가 블록의 시작과 끝을 한눈에 확인할
수 없는 경우에 효과가 커진다.
4. 유지보수 프로그래머가 각 블록을 한 화면에 확인하기 어렵게 만들 수
있다면 중첩 구조체로도 단기 기억 메모리 한계를 간단히 초과할 수 있다