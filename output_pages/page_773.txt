772
Chapter 8
Exceptional Control Flow
ﬁles that can be read by user programs. For example, you can use the /proc ﬁlesys-
tem to ﬁnd out general system attributes such as CPU type (/proc/cpuinfo), or
the memory segments used by a particular process (/proc/process-id/maps). The
2.6 version of the Linux kernel introduced a /sys ﬁlesystem, which exports addi-
tional low-level information about system buses and devices.
8.2.5
Context Switches
The operating system kernel implements multitasking using a higher-level form
of exceptional control ﬂow known as a context switch. The context switch mecha-
nism is built on top of the lower-level exception mechanism that we discussed in
Section 8.1.
The kernel maintains a context for each process. The context is the state
that the kernel needs to restart a preempted process. It consists of the values
of objects such as the general-purpose registers, the ﬂoating-point registers, the
program counter, user’s stack, status registers, kernel’s stack, and various kernel
data structures such as a page table that characterizes the address space, a process
table that contains information about the current process, and a ﬁle table that
contains information about the ﬁles that the process has opened.
At certain points during the execution of a process, the kernel can decide
to preempt the current process and restart a previously preempted process. This
decision is known as scheduling and is handled by code in the kernel, called the
scheduler. When the kernel selects a new process to run, we say that the kernel
has scheduled that process. After the kernel has scheduled a new process to run,
it preempts the current process and transfers control to the new process using a
mechanism called a context switch that (1) saves the context of the current process,
(2) restores the saved context of some previously preempted process, and (3)
passes control to this newly restored process.
A context switch can occur while the kernel is executing a system call on behalf
of the user. If the system call blocks because it is waiting for some event to occur,
then the kernel can put the current process to sleep and switch to another process.
For example, if a read system call requires a disk access, the kernel can opt to
perform a context switch and run another process instead of waiting for the data
to arrive from the disk. Another example is the sleep system call, which is an
explicit request to put the calling process to sleep. In general, even if a system
call does not block, the kernel can decide to perform a context switch rather than
return control to the calling process.
A context switch can also occur as a result of an interrupt. For example, all
systems have some mechanism for generating periodic timer interrupts, typically
every 1 ms or 10 ms. Each time a timer interrupt occurs, the kernel can decide that
the current process has run long enough and switch to a new process.
Figure 8.14 shows an example of context switching between a pair of processes
A and B. In this example, initially process A is running in user mode until it traps to
the kernel by executing a read system call. The trap handler in the kernel requests
a DMA transfer from the disk controller and arranges for the disk to interrupt the
