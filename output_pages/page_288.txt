Section 3.7
Procedures
287
Figure 3.33
Stack frame for function
call_proc. The stack
frame contains local
variables, as well as two of
the arguments to pass to
function proc.
Stack pointer
%rsp
Argument 8 = &x4
Argument 7
Return address
x1
32
24
16
8
0
17
18
20
x4
x3
x2
x4
4
When procedure proc is called, the program will begin executing the code
shown in Figure 3.29(b). As shown in Figure 3.30, arguments 7 and 8 are now
at offsets 8 and 16 relative to the stack pointer, because the return address was
pushed onto the stack.
When the program returns to call_proc, the code retrieves the values of the
four local variables (lines 17–20) and performs the ﬁnal computations. It ﬁnishes
by incrementing the stack pointer by 32 to deallocate the stack frame.
3.7.5
Local Storage in Registers
The set of program registers acts as a single resource shared by all of the proce-
dures. Although only one procedure can be active at a given time, we must make
sure that when one procedure (the caller) calls another (the callee), the callee does
not overwrite some register value that the caller planned to use later. For this rea-
son, x86-64 adopts a uniform set of conventions for register usage that must be
respected by all procedures, including those in program libraries.
By convention, registers %rbx, %rbp, and %r12–%r15 are classiﬁed as callee-
saved registers. When procedure P calls procedure Q, Q must preserve the values
of these registers, ensuring that they have the same values when Q returns to P as
they did when Q was called. Procedure Q can preserve a register value by either not
changing it at all or by pushing the original value on the stack, altering it, and then
popping the old value from the stack before returning. The pushing of register
values has the effect of creating the portion of the stack frame labeled “Saved
registers” in Figure 3.25. With this convention, the code for P can safely store a
value in a callee-saved register (after saving the previous value on the stack, of
course), call Q, and then use the value in the register without risk of it having been
corrupted.
All other registers, except for the stack pointer %rsp, are classiﬁed as caller-
saved registers. This means that they can be modiﬁed by any function. The name
“caller saved” can be understood in the context of a procedure P having some local
data in such a register and calling procedure Q. Since Q is free to alter this register,
it is incumbent upon P (the caller) to ﬁrst save the data before it makes the call.
As an example, consider the function P shown in Figure 3.34(a). It calls Q twice.
During the ﬁrst call, it must retain the value of x for use later. Similarly, during
the second call, it must retain the value computed for Q(y). In Figure 3.34(b),
