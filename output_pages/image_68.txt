54
CHAPTER  09    발상의 전환
친구나, 직장동료, 우리의 발견을 가로챌 경쟁자에게 절대 말하지 말자. 어떤 경우
에라도 이 사건에 힌트를 제공하거나 사건을 기회로 이용하지 말아야 한다. 전문 
용어로 암호화한 메모를 위 관리자에게 전달해둠으로써 면책할 구멍을 마련할 수 
있다. 가능하면 추신으로 본문과 전혀 관련이 없는 사업 현황을 걱정하는 평문 메
모를 덧붙이는 것도 좋은 방법이다. 이제 우리가 해야 할 일은 모두 했으므로 밤에
는 두 다리 뻗고 잘 수 있을 것이다. 그리고 어느날 우리가 퇴직한 이후에 어마어마
한 급여를 제시하며 우리를 애타게 찾을 그날을 기다리자.
헛소리로 당황시켜라
때로는 대형 망치가 다른 도구보다 미묘할 수 있는 것처럼, 미묘함이란 생각하면 
생각할수록 놀라운 것이다. FooFactory와 같은 클래스를 만들고 실제 이 클래스
는 오브젝트 생성과는 전혀 관련이 없는 클래스지만 주석에 GoF의 생성 관련 패턴
(가짜 UML 디자인 문서를 가리키는 http 링크 등을 사용하면 효과적이다)을 추가
하자. 이렇게 함으로 유지보수 프로그래머가 망상에 빠지게 할 수 있다. 좀 더 미묘
하게 싱글톤을 반환하는 것이 아니라 새로운 인스턴스를 반환하는 protect 생성자
와 메소드 Foo f = Foo.newInstance()를 만들 수도 있다. 이로 발생할 수 있는 부
작용은 상상을 초월한다.
월간 서적 클럽
월간 서적 클럽에 가입하라. 저자 중에 책을 쓰느라 너무 바쁜 나머지 코드를 직접 
작성하지 못하는 저자를 찾아보자. 다이어그램만 잔뜩 있고 예제 코드가 없는 책이 
있는지 동네 서점에서 찾아보자. 이런 책을 훑어보면서 잘 알려지지 않은 유식한 
단어를 알아둔 다음 건방진 애송이가 들어오면 이들 단어로 한 방 먹여줄 수 있다. 
물론 우리의 코드로도 인상을 줄 수 있어야 한다. 우리의 어휘를 이해하지 못하는 
사람은 아마도 그것은 우리가 너무 똘똘하고 알고리즘이 심오하기 때문이라고 생
각할 것이다. 알고리즘을 쉽게 유추할 수 있게 설명하는 일은 피해야 한다.
This eBook is licensed to 남궁진(jinvicky@naver.com). Personal use only
