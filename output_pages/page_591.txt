590
Chapter 5
Optimizing Program Performance
As Figure 5.11 shows, modern processors have dedicated functional units to
perform load and store operations, and these units have internal buffers to hold
sets of outstanding requests for memory operations. For example, our reference
machine has two load units, each of which can hold up to 72 pending read requests.
It has a single store unit with a store buffer containing up to 42 write requests. Each
of these units can initiate 1 operation every clock cycle.
5.12.1
Load Performance
The performance of a program containing load operations depends on both the
pipelining capability and the latency of the load unit. In our experiments with
combining operations using our reference machine, we saw that the CPE never
got below 0.50 for any combination of data type and combining operation, except
when using SIMD operations. One factor limiting the CPE for our examples is
that they all require reading one value from memory for each element computed.
With two load units, each able to initiate at most 1 load operation every clock
cycle, the CPE cannot be less than 0.50. For applications where we must load k
values for every element computed, we can never achieve a CPE lower than k/2
(see, for example, Problem 5.15).
In our examples so far, we have not seen any performance effects due to the
latency of load operations. The addresses for our load operations depended only
on the loop index i, and so the load operations did not form part of a performance-
limiting critical path.
To determine the latency of the load operation on a machine, we can set up
a computation with a sequence of load operations, where the outcome of one
determines the address for the next. As an example, consider the function list_
len in Figure 5.31, which computes the length of a linked list. In the loop of this
function, each successive value of variable ls depends on the value read by the
pointer reference ls->next. Our measurements show that function list_len has
1
typedef struct ELE {
2
struct ELE *next;
3
long data;
4
} list_ele, *list_ptr;
5
6
long list_len(list_ptr ls) {
7
long len = 0;
8
while (ls) {
9
len++;
10
ls = ls->next;
11
}
12
return len;
13
}
Figure 5.31
Linked list function. Its performance is limited by the latency of the load
operation.
