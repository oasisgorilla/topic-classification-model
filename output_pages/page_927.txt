926
Chapter 10
System-Level I/O
I
nput/output (I/O) is the process of copying data between main memory and ex-
ternal devices such as disk drives, terminals, and networks. An input operation
copies data from an I/O device to main memory, and an output operation copies
data from memory to a device.
All language run-time systems provide higher-level facilities for performing
I/O. For example, ANSI C provides the standard I/O library, with functions such as
printf and scanf that perform buffered I/O. The C++ language provides similar
functionality with its overloaded << (“put to”) and >> (“get from”) operators. On
Linux systems, these higher-level I/O functions are implemented using system-
level Unix I/O functions provided by the kernel. Most of the time, the higher-level
I/O functions work quite well and there is no need to use Unix I/O directly. So
why bother learning about Unix I/O?
. Understanding Unix I/O will help you understand other systems concepts.I/O is
integral to the operation of a system, and because of this, we often encounter
circular dependencies between I/O and other systems ideas. For example,
I/O plays a key role in process creation and execution. Conversely, process
creation plays a key role in how ﬁles are shared by different processes. Thus,
to really understand I/O, you need to understand processes, and vice versa.
We have already touched on aspects of I/O in our discussions of the memory
hierarchy, linking and loading, processes, and virtual memory. Now that you
have a better understanding of these ideas, we can close the circle and delve
into I/O in more detail.
. Sometimes you have no choice but to use Unix I/O.There are some important
cases where using higher-level I/O functions is either impossible or inappro-
priate. For example, the standard I/O library provides no way to access ﬁle
metadata such as ﬁle size or ﬁle creation time. Further, there are problems
with the standard I/O library that make it risky to use for network program-
ming.
This chapter introduces you to the general concepts of Unix I/O and standard
I/O and shows you how to use them reliably from your C programs. Besides serving
as a general introduction, this chapter lays a ﬁrm foundation for our subsequent
study of network programming and concurrency.
10.1
Unix I/O
A Linux ﬁle is a sequence of m bytes:
B0, B1, . . . , Bk, . . . , Bm−1
All I/O devices, such as networks, disks, and terminals, are modeled as ﬁles, and
all input and output is performed by reading and writing the appropriate ﬁles. This
elegant mapping of devices to ﬁles allows the Linux kernel to export a simple, low-
level application interface, known as Unix I/O, that enables all input and output
to be performed in a uniform and consistent way:
