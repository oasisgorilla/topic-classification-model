Section 3.9
Heterogeneous Data Structures
307
With this encoding, however, there is no way to determine whether a given
node is a leaf or an internal node. A common method is to introduce an enumer-
ated type deﬁning the different possible choices for the union, and then create a
structure containing a tag ﬁeld and the union:
typedef enum { N_LEAF, N_INTERNAL } nodetype_t;
struct node_t {
nodetype_t type;
union {
struct {
struct node_t *left;
struct node_t *right;
} internal;
double data[2];
} info;
};
This structure requires a total of 24 bytes: 4 for type, and either 8 each for
info.internal.left and info.internal.right or 16 for info.data. As we will
discuss shortly, an additional 4 bytes of padding is required between the ﬁeld for
type and the union elements, bringing the total structure size to 4 + 4 + 16 = 24.
In this case, the savings gain of using a union is small relative to the awkwardness
of the resulting code. For data structures with more ﬁelds, the savings can be more
compelling.
Unions can also be used to access the bit patterns of different data types. For
example, suppose we use a simple cast to convert a value d of type double to a
value u of type unsigned long:
unsigned long u = (unsigned long) d;
Value u will be an integer representation of d. Except for the case where d is 0.0,
the bit representation of u will be very different from that of d. Now consider the
following code to generate a value of type unsigned long from a double:
unsigned long double2bits(double d) {
union {
double d;
unsigned long u;
} temp;
temp.d = d;
return temp.u;
};
In this code, we store the argument in the union using one data type and access it
using another. The result will be that u will have the same bit representation as d,
including ﬁelds for the sign bit, the exponent, and the signiﬁcand, as described in
