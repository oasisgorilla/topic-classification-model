782
Chapter 8
Exceptional Control Flow
7
printf("0"); fflush(stdout);
8
waitpid(-1, NULL, 0);
9
}
10
printf("3"); fflush(stdout);
11
printf("6"); exit(0);
12
}
code/ecf/global-waitprob0.c
The wait Function
The wait function is a simpler version of waitpid.
#include <sys/types.h>
#include <sys/wait.h>
pid_t wait(int *statusp);
Returns: PID of child if OK or −1 on error
Calling wait(&status) is equivalent to calling waitpid(-1, &status, 0).
Examples of Using waitpid
Because the waitpid function is somewhat complicated, it is helpful to look at
a few examples. Figure 8.18 shows a program that uses waitpid to wait, in no
particular order, for all of its N children to terminate. In line 11, the parent creates
each of the N children, and in line 12, each child exits with a unique exit status.
Aside
Constants associated with Unix functions
Constants such as WNOHANG and WUNTRACED are deﬁned by system header ﬁles. For example,
WNOHANG and WUNTRACED are deﬁned (indirectly) by the wait.h header ﬁle:
/* Bits in the third argument to ‘waitpid’. */
#define WNOHANG
1
/* Don’t block waiting. */
#define WUNTRACED
2
/* Report status of stopped children. */
In order to use these constants, you must include the wait.h header ﬁle in your code:
#include <sys/wait.h>
The man page for each Unix function lists the header ﬁles to include whenever you use that function
in your code. Also, in order to check return codes such as ECHILD and EINTR, you must include
errno.h. To simplify our code examples, we include a single header ﬁle called csapp.h that includes
the header ﬁles for all of the functions used in the book. The csapp.h header ﬁle is available online
from the CS:APP Web site.
