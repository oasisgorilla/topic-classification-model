388
Chapter 4
Processor Architecture
M
odern microprocessors are among the most complex systems ever created
by humans. A single silicon chip, roughly the size of a ﬁngernail, can con-
tain several high-performance processors, large cache memories, and the logic
required to interface them to external devices. In terms of performance, the pro-
cessors implemented on a single chip today dwarf the room-size supercomputers
that cost over $10 million just 20 years ago. Even the embedded processors found
in everyday appliances such as cell phones, navigation systems, and programmable
thermostats are far more powerful than the early developers of computers could
ever have envisioned.
So far, we have only viewed computer systems down to the level of machine-
language programs. We have seen that a processor must execute a sequence of
instructions, where each instruction performs some primitive operation, such as
adding two numbers. An instruction is encoded in binary form as a sequence of
1 or more bytes. The instructions supported by a particular processor and their
byte-level encodings are known as its instruction set architecture (ISA). Different
“families” of processors, such as Intel IA32 and x86-64, IBM/Freescale Power,
and the ARM processor family, have different ISAs. A program compiled for one
type of machine will not run on another. On the other hand, there are many dif-
ferent models of processors within a single family. Each manufacturer produces
processors of ever-growing performance and complexity, but the different models
remain compatible at the ISA level. Popular families, such as x86-64, have pro-
cessors supplied by multiple manufacturers. Thus, the ISA provides a conceptual
layer of abstraction between compiler writers, who need only know what instruc-
tions are permitted and how they are encoded, and processor designers, who must
build machines that execute those instructions.
In this chapter, we take a brief look at the design of processor hardware. We
study the way a hardware system can execute the instructions of a particular ISA.
This view will give you a better understanding of how computers work and the
technological challenges faced by computer manufacturers. One important con-
cept is that the actual way a modern processor operates can be quite different
from the model of computation implied by the ISA. The ISA model would seem
to imply sequential instruction execution, where each instruction is fetched and
executed to completion before the next one begins. By executing different parts
of multiple instructions simultaneously, the processor can achieve higher perfor-
mance than if it executed just one instruction at a time. Special mechanisms are
used to make sure the processor computes the same results as it would with se-
quential execution. This idea of using clever tricks to improve performance while
maintaining the functionality of a simpler and more abstract model is well known
in computer science. Examples include the use of caching in Web browsers and
information retrieval data structures such as balanced binary trees and hash tables.
Chances are you will never design your own processor. This is a task for
experts working at fewer than 100 companies worldwide. Why, then, should you
learn about processor design?
. It is intellectually interesting and important.There is an intrinsic value in learn-
ing how things work. It is especially interesting to learn the inner workings of
