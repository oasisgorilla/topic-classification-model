210
Chapter 3
Machine-Level Representation of Programs
Disassembly of function sum in binary file mstore.o
1
0000000000000000 <multstore>:
Offset
Bytes
Equivalent assembly language
2
0:
53
push
%rbx
3
1:
48 89 d3
mov
%rdx,%rbx
4
4:
e8 00 00 00 00
callq
9 <multstore+0x9>
5
9:
48 89 03
mov
%rax,(%rbx)
6
c:
5b
pop
%rbx
7
d:
c3
retq
On the left we see the 14 hexadecimal byte values, listed in the byte sequence
shown earlier, partitioned into groups of 1 to 5 bytes each. Each of these groups
is a single instruction, with the assembly-language equivalent shown on the right.
Several features about machine code and its disassembled representation are
worth noting:
. x86-64 instructions can range in length from 1 to 15 bytes. The instruction
encoding is designed so that commonly used instructions and those with fewer
operands require a smaller number of bytes than do less common ones or ones
with more operands.
. The instruction format is designed in such a way that from a given starting
position, there is a unique decoding of the bytes into machine instructions.
For example, only the instruction pushq %rbx can start with byte value 53.
. The disassembler determines the assembly code based purely on the byte
sequences in the machine-code ﬁle. It does not require access to the source or
assembly-code versions of the program.
. The disassembler uses a slightly different naming convention for the instruc-
tions than does the assembly code generated by gcc. In our example, it has
omitted the sufﬁx ‘q’ from many of the instructions. These sufﬁxes are size
designators and can be omitted in most cases. Conversely, the disassembler
adds the sufﬁx ‘q’ to the call and ret instructions. Again, these sufﬁxes can
safely be omitted.
Generating the actual executable code requires running a linker on the set
of object-code ﬁles, one of which must contain a function main. Suppose in ﬁle
main.c we had the following function:
#include <stdio.h>
void multstore(long, long, long *);
int main() {
long d;
multstore(2, 3, &d);
printf("2 * 3 --> %ld\n", d);
return 0;
}
